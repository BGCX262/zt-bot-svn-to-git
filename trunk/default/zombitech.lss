
zombitech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  0000178a  0000181e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000178a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001ce  008001ce  000018ec  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000071a  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001da8  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000541  00000000  00000000  00003e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ff3  00000000  00000000  0000436f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  00006364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c8  00000000  00000000  00006994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001354  00000000  00000000  0000715c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  000084b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea e8       	ldi	r30, 0x8A	; 138
      84:	f7 e1       	ldi	r31, 0x17	; 23
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	ae 3c       	cpi	r26, 0xCE	; 206
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	ae ec       	ldi	r26, 0xCE	; 206
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3c       	cpi	r26, 0xCF	; 207
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
      a6:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <firstTest>:
   #define FRONT_SENSOR_ONE    0x7F
   #define FRONT_SENSOR_TWO    0xBF
   #define BACK_SENSOR_ONE     0xDF
   #define BACK_SENSOR_TWO     0xEF    

   unsigned char pind = PIND;
      ae:	89 b1       	in	r24, 0x09	; 9
   unsigned char pina = PINA;
      b0:	80 b1       	in	r24, 0x00	; 0

   driveForward (255);
      b2:	8f ef       	ldi	r24, 0xFF	; 255
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <driveForward>
   while (1)
   {
   
      if (PIND == FRONT_SENSOR_ONE || PIND == FRONT_SENSOR_TWO)
      ba:	89 b1       	in	r24, 0x09	; 9
      bc:	8f 37       	cpi	r24, 0x7F	; 127
      be:	19 f0       	breq	.+6      	; 0xc6 <firstTest+0x18>
      c0:	89 b1       	in	r24, 0x09	; 9
      c2:	8f 3b       	cpi	r24, 0xBF	; 191
      c4:	29 f4       	brne	.+10     	; 0xd0 <firstTest+0x22>
      {
         driveBackward(255); 
      c6:	8f ef       	ldi	r24, 0xFF	; 255
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <driveBackward>
      ce:	0a c0       	rjmp	.+20     	; 0xe4 <firstTest+0x36>
      }
	  else if (PIND == BACK_SENSOR_ONE || PIND == BACK_SENSOR_TWO)
      d0:	89 b1       	in	r24, 0x09	; 9
      d2:	8f 3d       	cpi	r24, 0xDF	; 223
      d4:	19 f0       	breq	.+6      	; 0xdc <firstTest+0x2e>
      d6:	89 b1       	in	r24, 0x09	; 9
      d8:	8f 3e       	cpi	r24, 0xEF	; 239
      da:	21 f4       	brne	.+8      	; 0xe4 <firstTest+0x36>
	  {
         driveForward(255);
      dc:	8f ef       	ldi	r24, 0xFF	; 255
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <driveForward>
	  }

	  delay_ms(20);
      e4:	84 e1       	ldi	r24, 0x14	; 20
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
      ec:	e6 cf       	rjmp	.-52     	; 0xba <firstTest+0xc>

000000ee <portsTest>:

// Enable pullups on pins A and D, and display pin values.
//  Pins should all read high unless they are externally pulled low
//  (e.g. by connecting them to ground).
void portsTest()
{
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
	PORTA = 0xFF;						// enable pullups on A and D pins
      f4:	8f ef       	ldi	r24, 0xFF	; 255
      f6:	82 b9       	out	0x02, r24	; 2
	PORTD = 0xFF;
      f8:	8b b9       	out	0x0b, r24	; 11

	delay_ms( 10 );
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>

	unsigned char pind = PIND;
     102:	09 b1       	in	r16, 0x09	; 9
	unsigned char pina = PINA;
     104:	f0 b0       	in	r15, 0x00	; 0

	LCDString( "  PORTA:    PORTD:   " );
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDString>
    
    PIND = 0x80;
     10e:	80 e8       	ldi	r24, 0x80	; 128
     110:	89 b9       	out	0x09, r24	; 9
    LCDAddString( "  " );
     112:	86 e1       	ldi	r24, 0x16	; 22
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
    LCDBinary( PIND );
     11a:	89 b1       	in	r24, 0x09	; 9
     11c:	0e 94 9f 03 	call	0x73e	; 0x73e <LCDBinary>
	delay_ms(1000);
     120:	88 ee       	ldi	r24, 0xE8	; 232
     122:	93 e0       	ldi	r25, 0x03	; 3
     124:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
	PIND = 0x0;
     128:	19 b8       	out	0x09, r1	; 9
     12a:	57 c0       	rjmp	.+174    	; 0x1da <portsTest+0xec>


	while ( !checkForButton() )			// stay here until button is pressed
	{
		LCDBinary( PINA );				// display pin values
     12c:	80 b1       	in	r24, 0x00	; 0
     12e:	0e 94 9f 03 	call	0x73e	; 0x73e <LCDBinary>
		LCDAddString( "  " );
     132:	86 e1       	ldi	r24, 0x16	; 22
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
  		LCDBinary( PIND );
     13a:	89 b1       	in	r24, 0x09	; 9
     13c:	0e 94 9f 03 	call	0x73e	; 0x73e <LCDBinary>
		playNote( A(4) +2, 1000 );
		playNote( A(4) +5, 1000 );
		playNote( A(4) +2, 1000 );
        */
		// if the pins have changed, play a note based on the changed pin
		if ( PIND != pind )
     140:	19 b1       	in	r17, 0x09	; 9
     142:	10 17       	cp	r17, r16
     144:	19 f1       	breq	.+70     	; 0x18c <portsTest+0x9e>
		{
			pind = PIND;
     146:	19 b1       	in	r17, 0x09	; 9

			if ( !( pind & 0x80 ))
     148:	17 fd       	sbrc	r17, 7
     14a:	02 c0       	rjmp	.+4      	; 0x150 <portsTest+0x62>
				playNote( A(4), 1000 );
     14c:	89 e3       	ldi	r24, 0x39	; 57
     14e:	07 c0       	rjmp	.+14     	; 0x15e <portsTest+0x70>
			else if ( !( pind & 0x40 ))
     150:	16 fd       	sbrc	r17, 6
     152:	02 c0       	rjmp	.+4      	; 0x158 <portsTest+0x6a>
				playNote( A(4) + 1, 1000 );
     154:	8a e3       	ldi	r24, 0x3A	; 58
     156:	03 c0       	rjmp	.+6      	; 0x15e <portsTest+0x70>
			else if ( !( pind & 0x20 ))
     158:	15 fd       	sbrc	r17, 5
     15a:	04 c0       	rjmp	.+8      	; 0x164 <portsTest+0x76>
				playNote( A(4) + 2, 1000 );
     15c:	8b e3       	ldi	r24, 0x3B	; 59
     15e:	68 ee       	ldi	r22, 0xE8	; 232
     160:	73 e0       	ldi	r23, 0x03	; 3
     162:	31 c0       	rjmp	.+98     	; 0x1c6 <portsTest+0xd8>
			else if ( !( pind & 0x10 ))
     164:	14 fd       	sbrc	r17, 4
     166:	02 c0       	rjmp	.+4      	; 0x16c <portsTest+0x7e>
				playNote( A(4) + 3, 1000 );
     168:	8c e3       	ldi	r24, 0x3C	; 60
     16a:	f9 cf       	rjmp	.-14     	; 0x15e <portsTest+0x70>
			else if ( !( pind & 0x08 ))
     16c:	13 fd       	sbrc	r17, 3
     16e:	02 c0       	rjmp	.+4      	; 0x174 <portsTest+0x86>
				playNote( A(4) + 4, 1000 );
     170:	8d e3       	ldi	r24, 0x3D	; 61
     172:	f5 cf       	rjmp	.-22     	; 0x15e <portsTest+0x70>
			else if ( !( pind & 0x04 ))
     174:	12 fd       	sbrc	r17, 2
     176:	02 c0       	rjmp	.+4      	; 0x17c <portsTest+0x8e>
				playNote( A(4) + 5, 100 );
     178:	8e e3       	ldi	r24, 0x3E	; 62
     17a:	23 c0       	rjmp	.+70     	; 0x1c2 <portsTest+0xd4>
			else if ( !( pind & 0x02 ))
     17c:	11 fd       	sbrc	r17, 1
     17e:	02 c0       	rjmp	.+4      	; 0x184 <portsTest+0x96>
				playNote( A(4) + 6, 100 );
     180:	8f e3       	ldi	r24, 0x3F	; 63
     182:	1f c0       	rjmp	.+62     	; 0x1c2 <portsTest+0xd4>
			else if ( !( pind & 0x01 ))
     184:	10 fd       	sbrc	r17, 0
     186:	21 c0       	rjmp	.+66     	; 0x1ca <portsTest+0xdc>
				playNote( A(4) + 7, 100 );
     188:	80 e4       	ldi	r24, 0x40	; 64
     18a:	1b c0       	rjmp	.+54     	; 0x1c2 <portsTest+0xd4>
		}
		else if ( PINA != pina )
     18c:	80 b1       	in	r24, 0x00	; 0
     18e:	8f 15       	cp	r24, r15
     190:	e1 f0       	breq	.+56     	; 0x1ca <portsTest+0xdc>
		{
			pina = PINA;
     192:	f0 b0       	in	r15, 0x00	; 0

			if ( !( pina & 0x20 ))
     194:	f5 fc       	sbrc	r15, 5
     196:	02 c0       	rjmp	.+4      	; 0x19c <portsTest+0xae>
				playNote( A(5) + 2, 100 );
     198:	87 e4       	ldi	r24, 0x47	; 71
     19a:	13 c0       	rjmp	.+38     	; 0x1c2 <portsTest+0xd4>
			else if ( !( pina & 0x10 ))
     19c:	f4 fc       	sbrc	r15, 4
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <portsTest+0xb6>
				playNote( A(5) + 3, 100 );
     1a0:	88 e4       	ldi	r24, 0x48	; 72
     1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <portsTest+0xd4>
			else if ( !( pina & 0x08 ))
     1a4:	f3 fc       	sbrc	r15, 3
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <portsTest+0xbe>
				playNote( A(5) + 4, 100 );
     1a8:	89 e4       	ldi	r24, 0x49	; 73
     1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <portsTest+0xd4>
			else if ( !( pina & 0x04 ))
     1ac:	f2 fc       	sbrc	r15, 2
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <portsTest+0xc6>
				playNote( A(5) + 5, 100 );
     1b0:	8a e4       	ldi	r24, 0x4A	; 74
     1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <portsTest+0xd4>
			else if ( !( pina & 0x02 ))
     1b4:	f1 fc       	sbrc	r15, 1
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <portsTest+0xce>
				playNote( A(5) + 6, 100 );
     1b8:	8b e4       	ldi	r24, 0x4B	; 75
     1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <portsTest+0xd4>
			else if ( !( pina & 0x01 ))
     1bc:	f0 fc       	sbrc	r15, 0
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <portsTest+0xdc>
				playNote( A(5) + 7, 100 );
     1c0:	8c e4       	ldi	r24, 0x4C	; 76
     1c2:	64 e6       	ldi	r22, 0x64	; 100
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		}

		delay_ms( 10 );
     1ca:	8a e0       	ldi	r24, 0x0A	; 10
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>

		LCDMoveCursor( LCD_ROW_2 + 1 );	// move cursor to third row, column 1
     1d2:	85 e9       	ldi	r24, 0x95	; 149
     1d4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
     1d8:	01 2f       	mov	r16, r17
    LCDBinary( PIND );
	delay_ms(1000);
	PIND = 0x0;


	while ( !checkForButton() )			// stay here until button is pressed
     1da:	86 b1       	in	r24, 0x06	; 6
     1dc:	82 75       	andi	r24, 0x52	; 82
     1de:	09 f4       	brne	.+2      	; 0x1e2 <portsTest+0xf4>
     1e0:	a5 cf       	rjmp	.-182    	; 0x12c <portsTest+0x3e>
		delay_ms( 10 );

		LCDMoveCursor( LCD_ROW_2 + 1 );	// move cursor to third row, column 1
	}

	PORTA = 0;							// disable pullups on A and D pins
     1e2:	12 b8       	out	0x02, r1	; 2
	PORTD = 0;
     1e4:	1b b8       	out	0x0b, r1	; 11
}
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16
     1ea:	ff 90       	pop	r15
     1ec:	08 95       	ret

000001ee <sing>:
delay_ms(1000);
}

void sing()
{
 playNote( A(4) +5, 1000 );
     1ee:	8e e3       	ldi	r24, 0x3E	; 62
     1f0:	68 ee       	ldi	r22, 0xE8	; 232
     1f2:	73 e0       	ldi	r23, 0x03	; 3
     1f4:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 100 );
     1f8:	84 e6       	ldi	r24, 0x64	; 100
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +5, 1000 );
     200:	8e e3       	ldi	r24, 0x3E	; 62
     202:	68 ee       	ldi	r22, 0xE8	; 232
     204:	73 e0       	ldi	r23, 0x03	; 3
     206:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 100 );
     20a:	84 e6       	ldi	r24, 0x64	; 100
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +7, 1000 );
     212:	80 e4       	ldi	r24, 0x40	; 64
     214:	68 ee       	ldi	r22, 0xE8	; 232
     216:	73 e0       	ldi	r23, 0x03	; 3
     218:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 100 );
     21c:	84 e6       	ldi	r24, 0x64	; 100
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +3, 1000 );
     224:	8c e3       	ldi	r24, 0x3C	; 60
     226:	68 ee       	ldi	r22, 0xE8	; 232
     228:	73 e0       	ldi	r23, 0x03	; 3
     22a:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 100 );
     22e:	84 e6       	ldi	r24, 0x64	; 100
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +9, 1000 );
     236:	82 e4       	ldi	r24, 0x42	; 66
     238:	68 ee       	ldi	r22, 0xE8	; 232
     23a:	73 e0       	ldi	r23, 0x03	; 3
     23c:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 1000 );
     240:	88 ee       	ldi	r24, 0xE8	; 232
     242:	93 e0       	ldi	r25, 0x03	; 3
     244:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +3, 1000 );
     248:	8c e3       	ldi	r24, 0x3C	; 60
     24a:	68 ee       	ldi	r22, 0xE8	; 232
     24c:	73 e0       	ldi	r23, 0x03	; 3
     24e:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 300 );
     252:	8c e2       	ldi	r24, 0x2C	; 44
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +1, 1000 );
     25a:	8a e3       	ldi	r24, 0x3A	; 58
     25c:	68 ee       	ldi	r22, 0xE8	; 232
     25e:	73 e0       	ldi	r23, 0x03	; 3
     260:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 600 );
     264:	88 e5       	ldi	r24, 0x58	; 88
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +8, 1000 );
     26c:	81 e4       	ldi	r24, 0x41	; 65
     26e:	68 ee       	ldi	r22, 0xE8	; 232
     270:	73 e0       	ldi	r23, 0x03	; 3
     272:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 1000 );
     276:	88 ee       	ldi	r24, 0xE8	; 232
     278:	93 e0       	ldi	r25, 0x03	; 3
     27a:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		playNote( A(4) +2, 1000 );
     27e:	8b e3       	ldi	r24, 0x3B	; 59
     280:	68 ee       	ldi	r22, 0xE8	; 232
     282:	73 e0       	ldi	r23, 0x03	; 3
     284:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		playNote( A(4) +5, 1000 );
     288:	8e e3       	ldi	r24, 0x3E	; 62
     28a:	68 ee       	ldi	r22, 0xE8	; 232
     28c:	73 e0       	ldi	r23, 0x03	; 3
     28e:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		playNote( A(4) +2, 1000 );
     292:	8b e3       	ldi	r24, 0x3B	; 59
     294:	68 ee       	ldi	r22, 0xE8	; 232
     296:	73 e0       	ldi	r23, 0x03	; 3
     298:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
}
     29c:	08 95       	ret

0000029e <turnRight>:
LCDHex(s1);
}


void turnRight(int s)
{
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	8c 01       	movw	r16, r24
brakeHighMotor2( 0 );
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 07 05 	call	0xa0e	; 0xa0e <brakeHighMotor2>
brakeHighMotor1( 0 );
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 c9 04 	call	0x992	; 0x992 <brakeHighMotor1>
setMotor1( s );
     2b0:	c8 01       	movw	r24, r16
     2b2:	0e 94 90 04 	call	0x920	; 0x920 <setMotor1>
setMotor2( -s );
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	80 1b       	sub	r24, r16
     2bc:	91 0b       	sbc	r25, r17
     2be:	0e 94 ce 04 	call	0x99c	; 0x99c <setMotor2>
delay_ms(1000);
     2c2:	88 ee       	ldi	r24, 0xE8	; 232
     2c4:	93 e0       	ldi	r25, 0x03	; 3
     2c6:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
}
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	08 95       	ret

000002d0 <setSpeed2>:
LCDMoveCursor( LCD_ROW_1 );
LCDHex(s);
}

void setSpeed2(int s1, int s2)
{
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	7c 01       	movw	r14, r24
     2da:	8b 01       	movw	r16, r22
brakeHighMotor2( 0 );
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 07 05 	call	0xa0e	; 0xa0e <brakeHighMotor2>
brakeHighMotor1( 0 );
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	0e 94 c9 04 	call	0x992	; 0x992 <brakeHighMotor1>
setMotor1( s1 );
     2e8:	c7 01       	movw	r24, r14
     2ea:	0e 94 90 04 	call	0x920	; 0x920 <setMotor1>
setMotor2( s2 );
     2ee:	c8 01       	movw	r24, r16
     2f0:	0e 94 ce 04 	call	0x99c	; 0x99c <setMotor2>
LCDMoveCursor( LCD_ROW_0 );
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
LCDString("Speed: ");
     2fa:	89 e1       	ldi	r24, 0x19	; 25
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDString>
LCDMoveCursor( LCD_ROW_1 );
     302:	80 ec       	ldi	r24, 0xC0	; 192
     304:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
LCDHex(s1);
     308:	8e 2d       	mov	r24, r14
     30a:	0e 94 89 03 	call	0x712	; 0x712 <LCDHex>
}
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	ff 90       	pop	r15
     314:	ef 90       	pop	r14
     316:	08 95       	ret

00000318 <setSpeed>:
	brakeLowMotor2( 0 );
}


int setSpeed(int s)
{
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	18 2f       	mov	r17, r24
     31e:	09 2f       	mov	r16, r25
	
brakeHighMotor2( 0 );
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 07 05 	call	0xa0e	; 0xa0e <brakeHighMotor2>
brakeHighMotor1( 0 );
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 c9 04 	call	0x992	; 0x992 <brakeHighMotor1>
setMotor1( s );
     32c:	81 2f       	mov	r24, r17
     32e:	90 2f       	mov	r25, r16
     330:	0e 94 90 04 	call	0x920	; 0x920 <setMotor1>
setMotor2( s );
     334:	81 2f       	mov	r24, r17
     336:	90 2f       	mov	r25, r16
     338:	0e 94 ce 04 	call	0x99c	; 0x99c <setMotor2>
LCDMoveCursor( LCD_ROW_0 );
     33c:	80 e8       	ldi	r24, 0x80	; 128
     33e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
LCDString("Speed: ");
     342:	89 e1       	ldi	r24, 0x19	; 25
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDString>
LCDMoveCursor( LCD_ROW_1 );
     34a:	80 ec       	ldi	r24, 0xC0	; 192
     34c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
LCDHex(s);
     350:	81 2f       	mov	r24, r17
     352:	0e 94 89 03 	call	0x712	; 0x712 <LCDHex>
}
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	08 95       	ret

0000035c <motorsTest>:
}



void motorsTest(void)
{
     35c:	1f 93       	push	r17
	LCDString( "speed = trimpot 0x" );	
     35e:	81 e2       	ldi	r24, 0x21	; 33
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDString>

	ADMUX = 0x27;			// bit 7 and 6 clear: voltage ref is Vref pin
     366:	87 e2       	ldi	r24, 0x27	; 39
     368:	80 93 7c 00 	sts	0x007C, r24
     36c:	63 c0       	rjmp	.+198    	; 0x434 <motorsTest+0xd8>
							// bit 4 not implemented
							// bits 0-3: ADC channel (channel 7)

	while ( !checkForButton() ) 		// stay here until button is pressed
	{
		ADCSRA |= ( 1 << ADSC );			// start conversion
     36e:	80 91 7a 00 	lds	r24, 0x007A
     372:	80 64       	ori	r24, 0x40	; 64
     374:	80 93 7a 00 	sts	0x007A, r24
		while ( ADCSRA & ( 1 << ADSC ));	// wait for conversion to finish
     378:	80 91 7a 00 	lds	r24, 0x007A
     37c:	86 fd       	sbrc	r24, 6
     37e:	fc cf       	rjmp	.-8      	; 0x378 <motorsTest+0x1c>
		unsigned char speed = ADCH;
     380:	10 91 79 00 	lds	r17, 0x0079
		LCDAddString( "Speed: " );
     384:	89 e1       	ldi	r24, 0x19	; 25
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
		LCDMoveCursor( LCD_ROW_3 );
     38c:	84 ed       	ldi	r24, 0xD4	; 212
     38e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
		LCDAddString( "Speed: " );
     392:	89 e1       	ldi	r24, 0x19	; 25
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
		LCDHex( speed );
     39a:	81 2f       	mov	r24, r17
     39c:	0e 94 89 03 	call	0x712	; 0x712 <LCDHex>
	
		
		setSpeed(255);
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 8c 01 	call	0x318	; 0x318 <setSpeed>
        delay_ms(6000);
     3a8:	80 e7       	ldi	r24, 0x70	; 112
     3aa:	97 e1       	ldi	r25, 0x17	; 23
     3ac:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		sing();
     3b0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sing>
		setSpeed2(200,100);
     3b4:	88 ec       	ldi	r24, 0xC8	; 200
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	64 e6       	ldi	r22, 0x64	; 100
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <setSpeed2>
		delay_ms(1000);
     3c0:	88 ee       	ldi	r24, 0xE8	; 232
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		sing();
     3c8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sing>
		setSpeed(100);
     3cc:	84 e6       	ldi	r24, 0x64	; 100
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 8c 01 	call	0x318	; 0x318 <setSpeed>
        delay_ms(6000);
     3d4:	80 e7       	ldi	r24, 0x70	; 112
     3d6:	97 e1       	ldi	r25, 0x17	; 23
     3d8:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
	    setSpeed2(100,200);
     3dc:	84 e6       	ldi	r24, 0x64	; 100
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	68 ec       	ldi	r22, 0xC8	; 200
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <setSpeed2>
		sing();
     3e8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sing>
		delay_ms(1000);
     3ec:	88 ee       	ldi	r24, 0xE8	; 232
     3ee:	93 e0       	ldi	r25, 0x03	; 3
     3f0:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		setSpeed(-100);
     3f4:	8c e9       	ldi	r24, 0x9C	; 156
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
     3f8:	0e 94 8c 01 	call	0x318	; 0x318 <setSpeed>
        delay_ms(6000);
     3fc:	80 e7       	ldi	r24, 0x70	; 112
     3fe:	97 e1       	ldi	r25, 0x17	; 23
     400:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		sing();
     404:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sing>
		setSpeed(-255);
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	9f ef       	ldi	r25, 0xFF	; 255
     40c:	0e 94 8c 01 	call	0x318	; 0x318 <setSpeed>
        delay_ms(6000);
     410:	80 e7       	ldi	r24, 0x70	; 112
     412:	97 e1       	ldi	r25, 0x17	; 23
     414:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		setSpeed2(50,200);
     418:	82 e3       	ldi	r24, 0x32	; 50
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	68 ec       	ldi	r22, 0xC8	; 200
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	0e 94 68 01 	call	0x2d0	; 0x2d0 <setSpeed2>
		delay_ms(6000);
     424:	80 e7       	ldi	r24, 0x70	; 112
     426:	97 e1       	ldi	r25, 0x17	; 23
     428:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		//LCDMoveCursor( LCD_ROW_0 + 18 );// move cursor to top row, column 18
										//  (just after "speed = trimpot 0x")
	//	setMotor1( speed - 128 );
	//	setMotor2( speed - 128 );		

		delay_ms(10);
     42c:	8a e0       	ldi	r24, 0x0A	; 10
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
	ADMUX = 0x27;			// bit 7 and 6 clear: voltage ref is Vref pin
							// bit 5 set: left-adjust result (only need ADCH)
							// bit 4 not implemented
							// bits 0-3: ADC channel (channel 7)

	while ( !checkForButton() ) 		// stay here until button is pressed
     434:	86 b1       	in	r24, 0x06	; 6
     436:	82 75       	andi	r24, 0x52	; 82
     438:	09 f4       	brne	.+2      	; 0x43c <motorsTest+0xe0>
     43a:	99 cf       	rjmp	.-206    	; 0x36e <motorsTest+0x12>
	//	setMotor1( speed - 128 );
	//	setMotor2( speed - 128 );		

		delay_ms(10);
	}
	brakeLowMotor1( 0 );
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 c4 04 	call	0x988	; 0x988 <brakeLowMotor1>
	brakeLowMotor2( 0 );
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 02 05 	call	0xa04	; 0xa04 <brakeLowMotor2>
}
     448:	1f 91       	pop	r17
     44a:	08 95       	ret

0000044c <displaySplashscreen>:



// display X2 splashscreen
void displaySplashscreen()
{
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	00 d0       	rcall	.+0      	; 0x458 <displaySplashscreen+0xc>
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	LCDString( "       Pololu" );
     45c:	84 e3       	ldi	r24, 0x34	; 52
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDString>

	LCDMoveCursor( LCD_ROW_3 );		// move cursor to start of bottom row
     464:	84 ed       	ldi	r24, 0xD4	; 212
     466:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
	unsigned char vMajor, vMinor;
	getFirmwareVersion( &vMajor, &vMinor );
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	be 01       	movw	r22, r28
     470:	6e 5f       	subi	r22, 0xFE	; 254
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <getFirmwareVersion>
	LCDAddString("version ");
     478:	82 e4       	ldi	r24, 0x42	; 66
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
	LCDHex( vMajor );
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	0e 94 89 03 	call	0x712	; 0x712 <LCDHex>
	LCDChar( '.' );
     486:	8e e2       	ldi	r24, 0x2E	; 46
     488:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>
	LCDHex( vMinor );
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	0e 94 89 03 	call	0x712	; 0x712 <LCDHex>

	delay_ms( 400 );
     492:	80 e9       	ldi	r24, 0x90	; 144
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
	LCDMoveCursor( LCD_ROW_1 );		// move cursor to start of second row
     49a:	80 ec       	ldi	r24, 0xC0	; 192
     49c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
     4a0:	ff 24       	eor	r15, r15
     4a2:	0d c0       	rjmp	.+26     	; 0x4be <displaySplashscreen+0x72>
	char *str = "O r a n g u t a n X2";
	unsigned char i = 0;
	while ( str[ i ] != 0 )
	{
		LCDChar( str[ i ] );
     4a4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>
		playNote( str[ i ], 50 );
     4a8:	f8 01       	movw	r30, r16
     4aa:	80 81       	ld	r24, Z
     4ac:	62 e3       	ldi	r22, 0x32	; 50
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 6f 06 	call	0xcde	; 0xcde <playNote>
		delay_ms( 15 );
     4b4:	8f e0       	ldi	r24, 0x0F	; 15
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
		i++;
     4bc:	f3 94       	inc	r15

	delay_ms( 400 );
	LCDMoveCursor( LCD_ROW_1 );		// move cursor to start of second row
	char *str = "O r a n g u t a n X2";
	unsigned char i = 0;
	while ( str[ i ] != 0 )
     4be:	0f 2d       	mov	r16, r15
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	05 5b       	subi	r16, 0xB5	; 181
     4c4:	1e 4f       	sbci	r17, 0xFE	; 254
     4c6:	f8 01       	movw	r30, r16
     4c8:	80 81       	ld	r24, Z
     4ca:	88 23       	and	r24, r24
     4cc:	59 f7       	brne	.-42     	; 0x4a4 <displaySplashscreen+0x58>
		playNote( str[ i ], 50 );
		delay_ms( 15 );
		i++;
	}

	delay_ms(900);
     4ce:	84 e8       	ldi	r24, 0x84	; 132
     4d0:	93 e0       	ldi	r25, 0x03	; 3
     4d2:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
}
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	cf 91       	pop	r28
     4dc:	df 91       	pop	r29
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	08 95       	ret

000004e6 <main>:

}


int main()
{
     4e6:	1f 93       	push	r17
	SPIInit();			// allows the mega644 to send commands to the mega168
     4e8:	0e 94 48 04 	call	0x890	; 0x890 <SPIInit>
	LCDInit();
     4ec:	0e 94 0c 04 	call	0x818	; 0x818 <LCDInit>

	DDRC |= ~BUTTONS;
     4f0:	87 b1       	in	r24, 0x07	; 7
     4f2:	8d 6a       	ori	r24, 0xAD	; 173
     4f4:	87 b9       	out	0x07, r24	; 7
	PORTC |= ~BUTTONS;
     4f6:	88 b1       	in	r24, 0x08	; 8
     4f8:	8d 6a       	ori	r24, 0xAD	; 173
     4fa:	88 b9       	out	0x08, r24	; 8

	// initialize ADC
	ADCSRA = 0x87;		// bit 7 set: ADC enabled
     4fc:	87 e8       	ldi	r24, 0x87	; 135
     4fe:	80 93 7a 00 	sts	0x007A, r24
						// bit 3 clear: disable ADC interrupt
						// bits 0-2 set: ADC clock prescaler is 128

	while ( 1 )
	{
		displaySplashscreen();
     502:	0e 94 26 02 	call	0x44c	; 0x44c <displaySplashscreen>

		// display test options and system voltage
		LCDString("weeeeeee");
     506:	80 e6       	ldi	r24, 0x60	; 96
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDString>
		LCDMoveCursor( LCD_ROW_1 );
     50e:	80 ec       	ldi	r24, 0xC0	; 192
     510:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
		LCDAddString("All your bases are belong to us!!  ");
     514:	89 e6       	ldi	r24, 0x69	; 105
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>


		// setup the ADC to perform conversion on system voltage
		ADMUX = 0x26;		// bit 7 and 6 clear: voltage ref is Vref pin
     51c:	86 e2       	ldi	r24, 0x26	; 38
     51e:	80 93 7c 00 	sts	0x007C, r24
     522:	13 c0       	rjmp	.+38     	; 0x54a <main+0x64>
							// bits 0-3: ADC channel (channel 6)

		// while waiting for button press, continuously perform ADC conversions
		while ( !checkForButton() ) 
		{
			ADCSRA |= ( 1 << ADSC );			// start conversion
     524:	80 91 7a 00 	lds	r24, 0x007A
     528:	80 64       	ori	r24, 0x40	; 64
     52a:	80 93 7a 00 	sts	0x007A, r24
			while ( ADCSRA & ( 1 << ADSC ));	// wait while converting
     52e:	80 91 7a 00 	lds	r24, 0x007A
     532:	86 fd       	sbrc	r24, 6
     534:	fc cf       	rjmp	.-8      	; 0x52e <main+0x48>
			LCDMoveCursorLeft();				// move cursor left one
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
			LCDMoveCursorLeft();				// move cursor left one
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
			LCDHex( ADCH );						// display conversion result
     542:	80 91 79 00 	lds	r24, 0x0079
     546:	0e 94 89 03 	call	0x712	; 0x712 <LCDHex>
							// bit 5 set: left-adjust result (only need ADCH)
							// bit 4 not implemented
							// bits 0-3: ADC channel (channel 6)

		// while waiting for button press, continuously perform ADC conversions
		while ( !checkForButton() ) 
     54a:	86 b1       	in	r24, 0x06	; 6
     54c:	82 75       	andi	r24, 0x52	; 82
     54e:	51 f3       	breq	.-44     	; 0x524 <main+0x3e>
			LCDHex( ADCH );						// display conversion result
		}

		while ( 1 )
		{
			unsigned char button = checkForButton();
     550:	16 b1       	in	r17, 0x06	; 6
     552:	12 75       	andi	r17, 0x52	; 82
			delay_ms( 2 );						// let button finish bouncing
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
			while ( checkForButton() );			// wait while button held down
     55c:	86 b1       	in	r24, 0x06	; 6
     55e:	82 75       	andi	r24, 0x52	; 82
     560:	e9 f7       	brne	.-6      	; 0x55c <main+0x76>
			delay_ms( 2 );						// let button finish bouncing
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>

			if ( button == BUTTON1 )
     56a:	12 30       	cpi	r17, 0x02	; 2
     56c:	19 f4       	brne	.+6      	; 0x574 <main+0x8e>
				firstTest();
     56e:	0e 94 57 00 	call	0xae	; 0xae <firstTest>
     572:	09 c0       	rjmp	.+18     	; 0x586 <main+0xa0>

			if ( button == BUTTON4 )
     574:	10 31       	cpi	r17, 0x10	; 16
     576:	19 f4       	brne	.+6      	; 0x57e <main+0x98>
				motorsTest();
     578:	0e 94 ae 01 	call	0x35c	; 0x35c <motorsTest>
     57c:	04 c0       	rjmp	.+8      	; 0x586 <main+0xa0>

			else if ( button == BUTTON6 )
     57e:	10 34       	cpi	r17, 0x40	; 64
     580:	11 f4       	brne	.+4      	; 0x586 <main+0xa0>
				portsTest();
     582:	0e 94 77 00 	call	0xee	; 0xee <portsTest>

			while ( !checkForButton() );		// wait for button press
     586:	86 b1       	in	r24, 0x06	; 6
     588:	82 75       	andi	r24, 0x52	; 82
     58a:	e9 f3       	breq	.-6      	; 0x586 <main+0xa0>
     58c:	e1 cf       	rjmp	.-62     	; 0x550 <main+0x6a>

0000058e <setSpeed>:
#define MAX_ENGINE_POS_OUTPUT   255
#define MAX_ENGINE_NEG_OUTPUT   -255


static int setSpeed(int rightWheels, int leftWheels)
{
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	8c 01       	movw	r16, r24
     598:	7b 01       	movw	r14, r22
   brakeHighMotor2( 0 );
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 07 05 	call	0xa0e	; 0xa0e <brakeHighMotor2>
   brakeHighMotor1( 0 );
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	0e 94 c9 04 	call	0x992	; 0x992 <brakeHighMotor1>
   setMotor1( rightWheels );
     5a6:	c8 01       	movw	r24, r16
     5a8:	0e 94 90 04 	call	0x920	; 0x920 <setMotor1>
   setMotor2( leftWheels );
     5ac:	c7 01       	movw	r24, r14
     5ae:	0e 94 ce 04 	call	0x99c	; 0x99c <setMotor2>
}
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	08 95       	ret

000005bc <brake>:
      setSpeed( speed, speed);
}

int brake ( void )
{
   LCDAddString( " Breaking" );
     5bc:	8d e8       	ldi	r24, 0x8D	; 141
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
   LCDMoveCursor( LCD_ROW_0 );
     5c4:	80 e8       	ldi	r24, 0x80	; 128
     5c6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
   setSpeed( 0, 0);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	0e 94 c7 02 	call	0x58e	; 0x58e <setSpeed>
}
     5d6:	08 95       	ret

000005d8 <driveBackward>:
   if (speed > 0)
      setSpeed( speed, speed);
}

int driveBackward ( int speed )
{
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
   LCDAddString( " Drive Backward" );
     5de:	87 e9       	ldi	r24, 0x97	; 151
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
   LCDMoveCursor( LCD_ROW_0 );
     5e6:	80 e8       	ldi	r24, 0x80	; 128
     5e8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
   if (speed < 0)
     5ec:	d7 ff       	sbrs	r29, 7
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <driveBackward+0x20>
      setSpeed( speed, speed);
     5f0:	ce 01       	movw	r24, r28
     5f2:	be 01       	movw	r22, r28
     5f4:	0e 94 c7 02 	call	0x58e	; 0x58e <setSpeed>
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <driveForward>:
   LCDMoveCursor( LCD_ROW_0 );
   setSpeed( MAX_ENGINE_POS_OUTPUT, MAX_ENGINE_NEG_OUTPUT);
}

int driveForward ( int speed )
{
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	ec 01       	movw	r28, r24
   LCDAddString( " Drive Straight" );
     604:	87 ea       	ldi	r24, 0xA7	; 167
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
   LCDMoveCursor( LCD_ROW_0 );
     60c:	80 e8       	ldi	r24, 0x80	; 128
     60e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
   if (speed > 0)
     612:	1c 16       	cp	r1, r28
     614:	1d 06       	cpc	r1, r29
     616:	24 f4       	brge	.+8      	; 0x620 <driveForward+0x22>
      setSpeed( speed, speed);
     618:	ce 01       	movw	r24, r28
     61a:	be 01       	movw	r22, r28
     61c:	0e 94 c7 02 	call	0x58e	; 0x58e <setSpeed>
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <turnLeft90Degree>:
   setSpeed( MAX_ENGINE_NEG_OUTPUT, MAX_ENGINE_POS_OUTPUT);
}

int turnLeft90Degree ( void)
{
   LCDAddString( " Turn Left" );
     626:	87 eb       	ldi	r24, 0xB7	; 183
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
   LCDMoveCursor( LCD_ROW_0 );
     62e:	80 e8       	ldi	r24, 0x80	; 128
     630:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
   setSpeed( MAX_ENGINE_POS_OUTPUT, MAX_ENGINE_NEG_OUTPUT);
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	7f ef       	ldi	r23, 0xFF	; 255
     63c:	0e 94 c7 02 	call	0x58e	; 0x58e <setSpeed>
}
     640:	08 95       	ret

00000642 <turnRight90Degree>:

int turnRight90Degree( void )
{
   /* Set rightWheel to negative and leftWheel to positive for fast right turn*/
   /*add timer*/
   LCDAddString( " Turn Right" );
     642:	82 ec       	ldi	r24, 0xC2	; 194
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
   LCDMoveCursor( LCD_ROW_0 );
     64a:	80 e8       	ldi	r24, 0x80	; 128
     64c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
   setSpeed( MAX_ENGINE_NEG_OUTPUT, MAX_ENGINE_POS_OUTPUT);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	9f ef       	ldi	r25, 0xFF	; 255
     654:	6f ef       	ldi	r22, 0xFF	; 255
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	0e 94 c7 02 	call	0x58e	; 0x58e <setSpeed>
}
     65c:	08 95       	ret

0000065e <LCDWaitWhileBusy>:


void LCDWaitWhileBusy()
{
	unsigned char temp_ddr, read_data;
	temp_ddr = LCD_DATA_DDR;
     65e:	97 b1       	in	r25, 0x07	; 7

	LCD_DATA_DDR = 0;
     660:	17 b8       	out	0x07, r1	; 7

	// output the busy flag on LCD's DB7 (LCD_BF)
	LCD_COM_PORT = (LCD_COM_PORT & ~(1 << LCD_RS)) | (1 << LCD_RW);
     662:	85 b1       	in	r24, 0x05	; 5
     664:	8c 7f       	andi	r24, 0xFC	; 252
     666:	82 60       	ori	r24, 0x02	; 2
     668:	85 b9       	out	0x05, r24	; 5
	do
	{
		LCD_COM_PORT |= (1 << LCD_E);
     66a:	2b 9a       	sbi	0x05, 3	; 5
		asm(						// delay at least 120ns
     66c:	00 00       	nop
     66e:	00 00       	nop
     670:	00 00       	nop
			"nop" "\n\t"			//  each nop is 50ns with IO clk = 20MHz
			"nop" "\n\t"
			"nop" "\n\t"
			::);
		read_data = LCD_DATA_PIN;
     672:	86 b1       	in	r24, 0x06	; 6
		LCD_COM_PORT &= ~(1 << LCD_E);
     674:	2b 98       	cbi	0x05, 3	; 5
	...
		"nop" "\n\t"
		"nop" "\n\t"
		"nop" "\n\t"
		::);
	}
	while (read_data & (1 << LCD_BF));	// while LCD is busy, wait
     68e:	87 fd       	sbrc	r24, 7
     690:	ec cf       	rjmp	.-40     	; 0x66a <LCDWaitWhileBusy+0xc>

	LCD_DATA_DDR = temp_ddr;
     692:	97 b9       	out	0x07, r25	; 7
}
     694:	08 95       	ret

00000696 <LCDSend>:


// Send a command or data byte to the LCD
void LCDSend( unsigned char data, unsigned char RS_bv )
{ 
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	08 2f       	mov	r16, r24
     69c:	16 2f       	mov	r17, r22
	unsigned char temp_ddr, temp_port;

	LCDWaitWhileBusy();
     69e:	0e 94 2f 03 	call	0x65e	; 0x65e <LCDWaitWhileBusy>

	temp_ddr = LCD_DATA_DDR;		// save current DDRC state
     6a2:	27 b1       	in	r18, 0x07	; 7
	temp_port = LCD_DATA_PORT;		// save current PORTC state
     6a4:	98 b1       	in	r25, 0x08	; 8

	LCD_COM_PORT &= ~(( 1 << LCD_RW ) | ( 1 << LCD_RS ));// LCD write, clear RS
     6a6:	85 b1       	in	r24, 0x05	; 5
     6a8:	8c 7f       	andi	r24, 0xFC	; 252
     6aa:	85 b9       	out	0x05, r24	; 5
	LCD_COM_PORT |= RS_bv;			// select command or data send
     6ac:	85 b1       	in	r24, 0x05	; 5
     6ae:	81 2b       	or	r24, r17
     6b0:	85 b9       	out	0x05, r24	; 5
	LCD_DATA_DDR = 0xFF;			// LCD data pins set as outputs
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	87 b9       	out	0x07, r24	; 7
	LCD_DATA_PORT = 0;
     6b6:	18 b8       	out	0x08, r1	; 8
	LCD_COM_PORT |= ( 1 << LCD_E );	// set LCD chip-enable signal
     6b8:	2b 9a       	sbi	0x05, 3	; 5
	asm( "nop" "\n\t" :: );			// delay briefly
     6ba:	00 00       	nop
	LCD_DATA_PORT = data;			// send data
     6bc:	08 b9       	out	0x08, r16	; 8
	asm(							// enable line must stay high for > 230ns
     6be:	00 00       	nop
     6c0:	00 00       	nop
     6c2:	00 00       	nop
		"nop" "\n\t"				//   each nop is 50ns with IO clk = 20MHz
		"nop" "\n\t"
		"nop" "\n\t"
		:: );
   LCD_COM_PORT &= ~( 1 << LCD_E );	// end chip-enable signal
     6c4:	2b 98       	cbi	0x05, 3	; 5
   LCD_DATA_PORT = temp_port;		// restore original PORTC state
     6c6:	98 b9       	out	0x08, r25	; 8
   LCD_DATA_DDR = temp_ddr;			// restore original DDRC state
     6c8:	27 b9       	out	0x07, r18	; 7
}
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <LCDSendCommand>:


void LCDSendCommand( unsigned char command )
{
	LCDSend( command, 0 );
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	0e 94 4b 03 	call	0x696	; 0x696 <LCDSend>
}
     6d6:	08 95       	ret

000006d8 <LCDSendData>:


void LCDSendData( unsigned char data )
{
	LCDSend( data, 1 << LCD_RS );
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	0e 94 4b 03 	call	0x696	; 0x696 <LCDSend>
}
     6de:	08 95       	ret

000006e0 <LCDAddString>:


// display a character string
void LCDAddString( const char *str )
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	ec 01       	movw	r28, r24
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <LCDAddString+0xe>
	while ( *str != 0 )
		LCDSendData( *str++ );
     6e8:	21 96       	adiw	r28, 0x01	; 1
     6ea:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>


// display a character string
void LCDAddString( const char *str )
{
	while ( *str != 0 )
     6ee:	88 81       	ld	r24, Y
     6f0:	88 23       	and	r24, r24
     6f2:	d1 f7       	brne	.-12     	; 0x6e8 <LCDAddString+0x8>
		LCDSendData( *str++ );
} 
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <LCDString>:


// clear the LCD, then display a character string
void LCDString( const char *str )
{
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	8c 01       	movw	r16, r24
	LCDClear();
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
	LCDAddString( str );
     706:	c8 01       	movw	r24, r16
     708:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCDAddString>
}
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <LCDHex>:


// display a byte in hex 
void LCDHex( unsigned char byte )
{
     712:	1f 93       	push	r17
     714:	18 2f       	mov	r17, r24
	unsigned char nibble;

	// display high nibble
	nibble = byte >> 4;
     716:	82 95       	swap	r24
     718:	8f 70       	andi	r24, 0x0F	; 15
	if ( nibble < 10 )
     71a:	8a 30       	cpi	r24, 0x0A	; 10
     71c:	10 f4       	brcc	.+4      	; 0x722 <LCDHex+0x10>
		LCDSendData( '0' + nibble );
     71e:	80 5d       	subi	r24, 0xD0	; 208
     720:	01 c0       	rjmp	.+2      	; 0x724 <LCDHex+0x12>
	else
		LCDSendData( 'A' + ( nibble - 10 ));
     722:	89 5c       	subi	r24, 0xC9	; 201
     724:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>

	// display low nibble
	nibble = byte & 0x0F;
     728:	81 2f       	mov	r24, r17
     72a:	8f 70       	andi	r24, 0x0F	; 15
	if ( nibble < 10 )
     72c:	8a 30       	cpi	r24, 0x0A	; 10
     72e:	10 f4       	brcc	.+4      	; 0x734 <LCDHex+0x22>
		LCDSendData( '0' + nibble );
     730:	80 5d       	subi	r24, 0xD0	; 208
     732:	01 c0       	rjmp	.+2      	; 0x736 <LCDHex+0x24>
	else
		LCDSendData( 'A' + ( nibble - 10 ));
     734:	89 5c       	subi	r24, 0xC9	; 201
     736:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>
}
     73a:	1f 91       	pop	r17
     73c:	08 95       	ret

0000073e <LCDBinary>:


// display a byte in binary
void LCDBinary( unsigned char byte )
{
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	f8 2e       	mov	r15, r24
     746:	00 e0       	ldi	r16, 0x00	; 0
     748:	10 e8       	ldi	r17, 0x80	; 128
	unsigned char i, bitmask;

	bitmask = 1 << 7;
	for ( i = 0; i < 8; i++ )
	{
		if ( byte & bitmask )
     74a:	81 2f       	mov	r24, r17
     74c:	8f 21       	and	r24, r15
     74e:	11 f0       	breq	.+4      	; 0x754 <LCDBinary+0x16>
			LCDSendData( '1' );
     750:	81 e3       	ldi	r24, 0x31	; 49
     752:	01 c0       	rjmp	.+2      	; 0x756 <LCDBinary+0x18>
		else
			LCDSendData( '0' );
     754:	80 e3       	ldi	r24, 0x30	; 48
     756:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>
void LCDBinary( unsigned char byte )
{
	unsigned char i, bitmask;

	bitmask = 1 << 7;
	for ( i = 0; i < 8; i++ )
     75a:	0f 5f       	subi	r16, 0xFF	; 255
     75c:	08 30       	cpi	r16, 0x08	; 8
     75e:	11 f0       	breq	.+4      	; 0x764 <LCDBinary+0x26>
	{
		if ( byte & bitmask )
			LCDSendData( '1' );
		else
			LCDSendData( '0' );
		bitmask >>= 1;
     760:	16 95       	lsr	r17
     762:	f3 cf       	rjmp	.-26     	; 0x74a <LCDBinary+0xc>
	}
}
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	ff 90       	pop	r15
     76a:	08 95       	ret

0000076c <LCDUInt>:


// display an unsigned integer in decimal
void LCDUInt( unsigned int word )
{
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	1f 93       	push	r17
     772:	df 93       	push	r29
     774:	cf 93       	push	r28
     776:	00 d0       	rcall	.+0      	; 0x778 <LCDUInt+0xc>
     778:	00 d0       	rcall	.+0      	; 0x77a <LCDUInt+0xe>
     77a:	0f 92       	push	r0
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	bc 01       	movw	r22, r24
     782:	15 e0       	ldi	r17, 0x05	; 5
	do
	{
		digit = val;
		val /= 10;
		digit -= val * 10;
		str[--i] = '0' + digit;
     784:	7e 01       	movw	r14, r28
     786:	08 94       	sec
     788:	e1 1c       	adc	r14, r1
     78a:	f1 1c       	adc	r15, r1
	unsigned char digit;

	unsigned int val = word;
	do
	{
		digit = val;
     78c:	46 2f       	mov	r20, r22
		val /= 10;
     78e:	cb 01       	movw	r24, r22
     790:	6a e0       	ldi	r22, 0x0A	; 10
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	0e 94 af 0b 	call	0x175e	; 0x175e <__udivmodhi4>
		digit -= val * 10;
		str[--i] = '0' + digit;
     798:	11 50       	subi	r17, 0x01	; 1
     79a:	f7 01       	movw	r30, r14
     79c:	e1 0f       	add	r30, r17
     79e:	f1 1d       	adc	r31, r1
     7a0:	40 5d       	subi	r20, 0xD0	; 208
     7a2:	cb 01       	movw	r24, r22
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	9b 01       	movw	r18, r22
     7aa:	53 e0       	ldi	r21, 0x03	; 3
     7ac:	22 0f       	add	r18, r18
     7ae:	33 1f       	adc	r19, r19
     7b0:	5a 95       	dec	r21
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <LCDUInt+0x40>
     7b4:	82 0f       	add	r24, r18
     7b6:	93 1f       	adc	r25, r19
     7b8:	48 1b       	sub	r20, r24
     7ba:	40 83       	st	Z, r20
	}
	while ( val > 0 );
     7bc:	61 15       	cp	r22, r1
     7be:	71 05       	cpc	r23, r1
     7c0:	29 f7       	brne	.-54     	; 0x78c <LCDUInt+0x20>
     7c2:	08 c0       	rjmp	.+16     	; 0x7d4 <LCDUInt+0x68>

	for( ; i < 5; i++ )
		LCDSendData( str[i] );
     7c4:	f7 01       	movw	r30, r14
     7c6:	e1 0f       	add	r30, r17
     7c8:	f1 1d       	adc	r31, r1
     7ca:	80 81       	ld	r24, Z
     7cc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>
		digit -= val * 10;
		str[--i] = '0' + digit;
	}
	while ( val > 0 );

	for( ; i < 5; i++ )
     7d0:	1f 5f       	subi	r17, 0xFF	; 255
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <LCDUInt+0x70>
		LCDSendData( str[i] );
     7d4:	7e 01       	movw	r14, r28
     7d6:	08 94       	sec
     7d8:	e1 1c       	adc	r14, r1
     7da:	f1 1c       	adc	r15, r1
		digit -= val * 10;
		str[--i] = '0' + digit;
	}
	while ( val > 0 );

	for( ; i < 5; i++ )
     7dc:	15 30       	cpi	r17, 0x05	; 5
     7de:	90 f3       	brcs	.-28     	; 0x7c4 <LCDUInt+0x58>
		LCDSendData( str[i] );
}
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	cf 91       	pop	r28
     7ec:	df 91       	pop	r29
     7ee:	1f 91       	pop	r17
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	08 95       	ret

000007f6 <LCDInt>:


// display a signed integer in decimal
void LCDInt( int word )
{
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	ec 01       	movw	r28, r24
	if (word < 0)
     7fc:	97 ff       	sbrs	r25, 7
     7fe:	06 c0       	rjmp	.+12     	; 0x80c <LCDInt+0x16>
	{
		LCDSendData('-');
     800:	8d e2       	ldi	r24, 0x2D	; 45
     802:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCDSendData>
		word = -word;
     806:	d0 95       	com	r29
     808:	c1 95       	neg	r28
     80a:	df 4f       	sbci	r29, 0xFF	; 255
	}

	LCDUInt( (unsigned int) word );
     80c:	ce 01       	movw	r24, r28
     80e:	0e 94 b6 03 	call	0x76c	; 0x76c <LCDUInt>
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <LCDInit>:
//  initialized it will drive the pushbutton lines high and give you false
//  button-press readings.
void LCDInit()
{ 
	// set the three LCD control pins to outputs
	LCD_COM_DDR |= ( 1 << LCD_RW ) | ( 1 << LCD_RS ) | ( 1 << LCD_E );
     818:	84 b1       	in	r24, 0x04	; 4
     81a:	8b 60       	ori	r24, 0x0B	; 11
     81c:	84 b9       	out	0x04, r24	; 4

	// the busy flag cannot be used in this first section
	delay_ms( 30 );			// wait more than 15ms after Vcc rises to 4.5V
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
	LCDSendCommand( 0x30 );	// Function Set
     826:	80 e3       	ldi	r24, 0x30	; 48
     828:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
	delay_ms( 5 );			// wait more than 4.1ms
     82c:	85 e0       	ldi	r24, 0x05	; 5
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 39 04 	call	0x872	; 0x872 <delay_ms>
	LCDSendCommand( 0x30 );	// Function Set
     834:	80 e3       	ldi	r24, 0x30	; 48
     836:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>

static inline void delay_us(unsigned int microseconds) 
											__attribute__((always_inline));
void delay_us(unsigned int microseconds)
{
	__asm__ volatile (
     83a:	86 e9       	ldi	r24, 0x96	; 150
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	6f 93       	push	r22
     840:	64 e0       	ldi	r22, 0x04	; 4
     842:	6a 95       	dec	r22
     844:	f1 f7       	brne	.-4      	; 0x842 <LCDInit+0x2a>
     846:	6f 91       	pop	r22
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	c9 f7       	brne	.-14     	; 0x83e <LCDInit+0x26>
	delay_us( 150 );		// wait more than 100us
	LCDSendCommand( 0x30);	// Function Set
     84c:	80 e3       	ldi	r24, 0x30	; 48
     84e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>

	// it is now possible to use the busy flag rather than fixed delays
	//  if so desired

	// these calls should be customized for your desired LCD settings 
	LCDSendCommand( 0x38 );	// 8-bit, 2 line, 5x8 dots char
     852:	88 e3       	ldi	r24, 0x38	; 56
     854:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
	LCDSendCommand( 0x08 );	// display off, cursor off, blinking off
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
	LCDClear();
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
	LCDSendCommand( 0x06 );	// entry mode set (set cursor dir I, shift disable)
     864:	86 e0       	ldi	r24, 0x06	; 6
     866:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
	LCDSendCommand( 0x0C );	// display on, cursor off, blinking off
     86a:	8c e0       	ldi	r24, 0x0C	; 12
     86c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCDSendCommand>
}
     870:	08 95       	ret

00000872 <delay_ms>:


// Delay utility function -- delays for time_ms milliseconds by looping
void delay_ms(unsigned int time_ms)
{
	if (time_ms == 0)
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	61 f0       	breq	.+24     	; 0x88e <delay_ms+0x1c>
		return;

	__asm__ volatile (
     876:	6f 93       	push	r22
     878:	64 e5       	ldi	r22, 0x54	; 84
     87a:	7f 93       	push	r23
     87c:	7d e4       	ldi	r23, 0x4D	; 77
     87e:	7a 95       	dec	r23
     880:	f1 f7       	brne	.-4      	; 0x87e <delay_ms+0xc>
     882:	7f 91       	pop	r23
     884:	6a 95       	dec	r22
     886:	c9 f7       	brne	.-14     	; 0x87a <delay_ms+0x8>
     888:	6f 91       	pop	r22
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 f7       	brne	.-24     	; 0x876 <delay_ms+0x4>
     88e:	08 95       	ret

00000890 <SPIInit>:

// Initialize the SPI for communication with slave mega168
void SPIInit()
{
	// make the MOSI & SCK pins outputs
	DDRB |= ( 1 << PB5 ) | ( 1 << PB7 ) | ( 1<< PB4 );
     890:	84 b1       	in	r24, 0x04	; 4
     892:	80 6b       	ori	r24, 0xB0	; 176
     894:	84 b9       	out	0x04, r24	; 4

	// make sure the MISO pin is input
	DDRB &= ~( 1 << PB6 );
     896:	26 98       	cbi	0x04, 6	; 4

	// set up the SPI module: SPI enabled, MSB first, master mode,
	//  clock polarity and phase = 0, F_osc/8
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );
     898:	81 e5       	ldi	r24, 0x51	; 81
     89a:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1;     // set double SPI speed for F_osc/8
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	8d bd       	out	0x2d, r24	; 45

	// the previous settings clear SPIF, but we use this flag to indicate
	//  that this does not mean we are currently transmitting
	SPITransmitting = 0;
     8a0:	10 92 ce 01 	sts	0x01CE, r1
}
     8a4:	08 95       	ret

000008a6 <SPITransmit>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
     8a6:	98 2f       	mov	r25, r24
	if ( SPITransmitting )				// prevent false SPIF clears from
     8a8:	80 91 ce 01 	lds	r24, 0x01CE
     8ac:	88 23       	and	r24, r24
     8ae:	19 f0       	breq	.+6      	; 0x8b6 <SPITransmit+0x10>
		waitForTransmission();			//  hanging the wait loop
     8b0:	0d b4       	in	r0, 0x2d	; 45
     8b2:	07 fe       	sbrs	r0, 7
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <SPITransmit+0xa>
	SPDR = data;						// start transmission of data
     8b6:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 ce 01 	sts	0x01CE, r24
}
     8be:	08 95       	ret

000008c0 <SPIReceive>:


// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
     8c0:	28 2f       	mov	r18, r24
	if ( SPITransmitting )
     8c2:	80 91 ce 01 	lds	r24, 0x01CE
     8c6:	88 23       	and	r24, r24
     8c8:	19 f0       	breq	.+6      	; 0x8d0 <SPIReceive+0x10>
		waitForTransmission();				// #define in SPI.h
     8ca:	0d b4       	in	r0, 0x2d	; 45
     8cc:	07 fe       	sbrs	r0, 7
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <SPIReceive+0xa>
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	6f 93       	push	r22
     8d6:	64 e0       	ldi	r22, 0x04	; 4
     8d8:	6a 95       	dec	r22
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <SPIReceive+0x18>
     8dc:	6f 91       	pop	r22
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	c9 f7       	brne	.-14     	; 0x8d4 <SPIReceive+0x14>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
     8e2:	2e bd       	out	0x2e, r18	; 46
	waitForTransmission();					// #define in SPI.h
     8e4:	0d b4       	in	r0, 0x2d	; 45
     8e6:	07 fe       	sbrs	r0, 7
     8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <SPIReceive+0x24>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
     8ea:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
     8ee:	8e b5       	in	r24, 0x2e	; 46
}
     8f0:	08 95       	ret

000008f2 <sendMotorPWMCommand>:
// ***********************************************************************


// The pwm byte is tacked onto all motor commands in the following way:
void sendMotorPWMCommand( unsigned char command, unsigned char pwm )
{
     8f2:	98 2f       	mov	r25, r24


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     8f4:	80 91 ce 01 	lds	r24, 0x01CE
     8f8:	88 23       	and	r24, r24
     8fa:	19 f0       	breq	.+6      	; 0x902 <sendMotorPWMCommand+0x10>
		waitForTransmission();			//  hanging the wait loop
     8fc:	0d b4       	in	r0, 0x2d	; 45
     8fe:	07 fe       	sbrs	r0, 7
     900:	fd cf       	rjmp	.-6      	; 0x8fc <sendMotorPWMCommand+0xa>

// The pwm byte is tacked onto all motor commands in the following way:
void sendMotorPWMCommand( unsigned char command, unsigned char pwm )
{
	// the MSB of the speed gets tacked onto the command byte
	command |= ( pwm & 0x80 ) >> 7;
     902:	86 2f       	mov	r24, r22
     904:	88 1f       	adc	r24, r24
     906:	88 27       	eor	r24, r24
     908:	88 1f       	adc	r24, r24
     90a:	89 2b       	or	r24, r25
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     90c:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     90e:	0d b4       	in	r0, 0x2d	; 45
     910:	07 fe       	sbrs	r0, 7
     912:	fd cf       	rjmp	.-6      	; 0x90e <sendMotorPWMCommand+0x1c>
	// the MSB of the speed gets tacked onto the command byte
	command |= ( pwm & 0x80 ) >> 7;

	// now, send the command
	SPITransmit( command );
	SPITransmit( pwm & 0x7F );		// seven lowest bits of pwm byte
     914:	6f 77       	andi	r22, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     916:	6e bd       	out	0x2e, r22	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 ce 01 	sts	0x01CE, r24
	command |= ( pwm & 0x80 ) >> 7;

	// now, send the command
	SPITransmit( command );
	SPITransmit( pwm & 0x7F );		// seven lowest bits of pwm byte
}
     91e:	08 95       	ret

00000920 <setMotor1>:

// Drive motor 1 at the pwm specified by speed.  The sign of speed determines
//  the direction and the magnitude of speed should be 0 - 255.  This command
//  affects the motor immediately.
void setMotor1( int speed )
{
     920:	bc 01       	movw	r22, r24
	unsigned char command;
	
	if ( speed > 255 )
     922:	8f 3f       	cpi	r24, 0xFF	; 255
     924:	91 05       	cpc	r25, r1
     926:	21 f0       	breq	.+8      	; 0x930 <setMotor1+0x10>
     928:	1c f0       	brlt	.+6      	; 0x930 <setMotor1+0x10>
     92a:	6f ef       	ldi	r22, 0xFF	; 255
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <setMotor1+0x22>
		speed = 255;
	if ( speed < -255 )
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	61 30       	cpi	r22, 0x01	; 1
     934:	78 07       	cpc	r23, r24
     936:	1c f4       	brge	.+6      	; 0x93e <setMotor1+0x1e>
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	7f ef       	ldi	r23, 0xFF	; 255
     93c:	04 c0       	rjmp	.+8      	; 0x946 <setMotor1+0x26>
		speed = -255;

	if ( speed >= 0 )
     93e:	77 fd       	sbrc	r23, 7
     940:	02 c0       	rjmp	.+4      	; 0x946 <setMotor1+0x26>
     942:	88 e8       	ldi	r24, 0x88	; 136
     944:	04 c0       	rjmp	.+8      	; 0x94e <setMotor1+0x2e>
		command = CMD_MOTOR1_FORWARD;		// motor 1, forward
	else
	{
		command = CMD_MOTOR1_REVERSE;		// motor 1, reverse
		speed = -speed;
     946:	70 95       	com	r23
     948:	61 95       	neg	r22
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	8a e8       	ldi	r24, 0x8A	; 138
	}

	sendMotorPWMCommand(command, (unsigned char) speed);
     94e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     952:	08 95       	ret

00000954 <accelMotor1>:
// Accelerate motor 1 from its current speed and direction to the specified
//  speed and direction.  Acceleration is only applied when the pwm is
//  increasing, which always happens when this call results in a direction
//  change.  This command updates motor state every 10ms.
void accelMotor1( int speed )
{
     954:	bc 01       	movw	r22, r24
	unsigned char command;
	
	if ( speed > 255 )
     956:	8f 3f       	cpi	r24, 0xFF	; 255
     958:	91 05       	cpc	r25, r1
     95a:	21 f0       	breq	.+8      	; 0x964 <accelMotor1+0x10>
     95c:	1c f0       	brlt	.+6      	; 0x964 <accelMotor1+0x10>
     95e:	6f ef       	ldi	r22, 0xFF	; 255
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	09 c0       	rjmp	.+18     	; 0x976 <accelMotor1+0x22>
		speed = 255;
	if ( speed < -255 )
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	61 30       	cpi	r22, 0x01	; 1
     968:	78 07       	cpc	r23, r24
     96a:	1c f4       	brge	.+6      	; 0x972 <accelMotor1+0x1e>
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	7f ef       	ldi	r23, 0xFF	; 255
     970:	04 c0       	rjmp	.+8      	; 0x97a <accelMotor1+0x26>
		speed = -255;

	if ( speed >= 0 )
     972:	77 fd       	sbrc	r23, 7
     974:	02 c0       	rjmp	.+4      	; 0x97a <accelMotor1+0x26>
     976:	88 ee       	ldi	r24, 0xE8	; 232
     978:	04 c0       	rjmp	.+8      	; 0x982 <accelMotor1+0x2e>
		command = CMD_MOTOR1_ACCEL_FORWARD;		// motor 1, accel forward
	else
	{
		command = CMD_MOTOR1_ACCEL_REVERSE;		// motor 1, accel reverse
		speed = -speed;
     97a:	70 95       	com	r23
     97c:	61 95       	neg	r22
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	8a ee       	ldi	r24, 0xEA	; 234
	}

	sendMotorPWMCommand(command, (unsigned char) speed);
     982:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     986:	08 95       	ret

00000988 <brakeLowMotor1>:


// Variable braking for motor 1.   This command affects the motor immediately.
void brakeLowMotor1(unsigned char pwm)
{
     988:	68 2f       	mov	r22, r24
	sendMotorPWMCommand(CMD_MOTOR1_BRAKE_LOW, pwm);
     98a:	80 e8       	ldi	r24, 0x80	; 128
     98c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     990:	08 95       	ret

00000992 <brakeHighMotor1>:


// Variable braking for motor 1.   This command affects the motor immediately.
void brakeHighMotor1(unsigned char pwm)
{
     992:	68 2f       	mov	r22, r24
	sendMotorPWMCommand(CMD_MOTOR1_BRAKE_HIGH, pwm);
     994:	82 e8       	ldi	r24, 0x82	; 130
     996:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     99a:	08 95       	ret

0000099c <setMotor2>:

// Drive motor 2 at the pwm specified by speed.  The sign of speed determines
//  the direction and the magnitude of speed should be 0 - 255.  This command
//  affects the motor immediately.
void setMotor2( int speed )
{
     99c:	bc 01       	movw	r22, r24
	unsigned char command;
	
	if ( speed > 255 )
     99e:	8f 3f       	cpi	r24, 0xFF	; 255
     9a0:	91 05       	cpc	r25, r1
     9a2:	21 f0       	breq	.+8      	; 0x9ac <setMotor2+0x10>
     9a4:	1c f0       	brlt	.+6      	; 0x9ac <setMotor2+0x10>
     9a6:	6f ef       	ldi	r22, 0xFF	; 255
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	09 c0       	rjmp	.+18     	; 0x9be <setMotor2+0x22>
		speed = 255;
	if ( speed < -255 )
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	61 30       	cpi	r22, 0x01	; 1
     9b0:	78 07       	cpc	r23, r24
     9b2:	1c f4       	brge	.+6      	; 0x9ba <setMotor2+0x1e>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	7f ef       	ldi	r23, 0xFF	; 255
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <setMotor2+0x26>
		speed = -255;

	if ( speed >= 0 )
     9ba:	77 fd       	sbrc	r23, 7
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <setMotor2+0x26>
     9be:	8c e8       	ldi	r24, 0x8C	; 140
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <setMotor2+0x2e>
		command = CMD_MOTOR2_FORWARD;		// motor 2, forward
	else
	{
		command = CMD_MOTOR2_REVERSE;		// motor 2, reverse
		speed = -speed;
     9c2:	70 95       	com	r23
     9c4:	61 95       	neg	r22
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	8e e8       	ldi	r24, 0x8E	; 142
	}

	sendMotorPWMCommand(command, (unsigned char) speed);
     9ca:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     9ce:	08 95       	ret

000009d0 <accelMotor2>:
// Accelerate motor 2 from its current speed and direction to the specified
//  speed and direction.  Acceleration is only applied when the pwm is
//  increasing, which always happens when this call results in a direction
//  change.  This command updates motor state every 10ms.
void accelMotor2( int speed )
{
     9d0:	bc 01       	movw	r22, r24
	unsigned char command;
	
	if ( speed > 255 )
     9d2:	8f 3f       	cpi	r24, 0xFF	; 255
     9d4:	91 05       	cpc	r25, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <accelMotor2+0x10>
     9d8:	1c f0       	brlt	.+6      	; 0x9e0 <accelMotor2+0x10>
     9da:	6f ef       	ldi	r22, 0xFF	; 255
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <accelMotor2+0x22>
		speed = 255;
	if ( speed < -255 )
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	61 30       	cpi	r22, 0x01	; 1
     9e4:	78 07       	cpc	r23, r24
     9e6:	1c f4       	brge	.+6      	; 0x9ee <accelMotor2+0x1e>
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	7f ef       	ldi	r23, 0xFF	; 255
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <accelMotor2+0x26>
		speed = -255;

	if ( speed >= 0 )
     9ee:	77 fd       	sbrc	r23, 7
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <accelMotor2+0x26>
     9f2:	8c ee       	ldi	r24, 0xEC	; 236
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <accelMotor2+0x2e>
		command = CMD_MOTOR2_ACCEL_FORWARD;		// motor 2, accel forward
	else
	{
		command = CMD_MOTOR2_ACCEL_REVERSE;		// motor 2, accel reverse
		speed = -speed;
     9f6:	70 95       	com	r23
     9f8:	61 95       	neg	r22
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	8e ee       	ldi	r24, 0xEE	; 238
	}

	sendMotorPWMCommand(command, (unsigned char) speed);
     9fe:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     a02:	08 95       	ret

00000a04 <brakeLowMotor2>:


// Variable braking for motor 2.   This command affects the motor immediately.
void brakeLowMotor2(unsigned char pwm)
{
     a04:	68 2f       	mov	r22, r24
	sendMotorPWMCommand(CMD_MOTOR2_BRAKE_LOW, pwm);
     a06:	84 e8       	ldi	r24, 0x84	; 132
     a08:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     a0c:	08 95       	ret

00000a0e <brakeHighMotor2>:


// Variable braking for motor 2.   This command affects the motor immediately.
void brakeHighMotor2(unsigned char pwm)
{
     a0e:	68 2f       	mov	r22, r24
	sendMotorPWMCommand(CMD_MOTOR2_BRAKE_HIGH, pwm);
     a10:	86 e8       	ldi	r24, 0x86	; 134
     a12:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     a16:	08 95       	ret

00000a18 <setJointMotor>:

// Drive jointly controlled motor at the pwm specified by speed. The sign of
//  speed determines the direction and the magnitude of speed should be 0-255.
//  This command affects the motor immediately.
void setJointMotor( int speed )
{
     a18:	bc 01       	movw	r22, r24
	unsigned char command;
	
	if ( speed > 255 )
     a1a:	8f 3f       	cpi	r24, 0xFF	; 255
     a1c:	91 05       	cpc	r25, r1
     a1e:	21 f0       	breq	.+8      	; 0xa28 <setJointMotor+0x10>
     a20:	1c f0       	brlt	.+6      	; 0xa28 <setJointMotor+0x10>
     a22:	6f ef       	ldi	r22, 0xFF	; 255
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <setJointMotor+0x22>
		speed = 255;
	if ( speed < -255 )
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	61 30       	cpi	r22, 0x01	; 1
     a2c:	78 07       	cpc	r23, r24
     a2e:	1c f4       	brge	.+6      	; 0xa36 <setJointMotor+0x1e>
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	7f ef       	ldi	r23, 0xFF	; 255
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <setJointMotor+0x26>
		speed = -255;

	if ( speed >= 0 )
     a36:	77 fd       	sbrc	r23, 7
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <setJointMotor+0x26>
     a3a:	82 e9       	ldi	r24, 0x92	; 146
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <setJointMotor+0x2e>
		command = CMD_JOINT_FORWARD;		// joint motor, forward
	else
	{
		command = CMD_JOINT_REVERSE;		// joint motor, reverse
		speed = -speed;
     a3e:	70 95       	com	r23
     a40:	61 95       	neg	r22
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	84 e9       	ldi	r24, 0x94	; 148
	}

	sendMotorPWMCommand(command, (unsigned char) speed);
     a46:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     a4a:	08 95       	ret

00000a4c <accelJointMotor>:
// Accelerate joint motor from its current speed and direction to the specified
//  speed and direction.  Acceleration is only applied when the pwm is
//  increasing, which always happens when this call results in a direction
//  change.  This command updates motor state every 10ms.
void accelJointMotor( int speed )
{
     a4c:	bc 01       	movw	r22, r24
	unsigned char command;
	
	if ( speed > 255 )
     a4e:	8f 3f       	cpi	r24, 0xFF	; 255
     a50:	91 05       	cpc	r25, r1
     a52:	29 f0       	breq	.+10     	; 0xa5e <accelJointMotor+0x12>
     a54:	24 f0       	brlt	.+8      	; 0xa5e <accelJointMotor+0x12>
     a56:	84 ee       	ldi	r24, 0xE4	; 228
     a58:	6f ef       	ldi	r22, 0xFF	; 255
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0f c0       	rjmp	.+30     	; 0xa7c <accelJointMotor+0x30>
		speed = 255;
	if ( speed < -255 )
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	61 30       	cpi	r22, 0x01	; 1
     a62:	78 07       	cpc	r23, r24
     a64:	1c f4       	brge	.+6      	; 0xa6c <accelJointMotor+0x20>
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	7f ef       	ldi	r23, 0xFF	; 255
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <accelJointMotor+0x28>
		speed = -255;

	if ( speed >= 0 )
     a6c:	77 fd       	sbrc	r23, 7
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <accelJointMotor+0x28>
     a70:	84 ee       	ldi	r24, 0xE4	; 228
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <accelJointMotor+0x30>
		command = CMD_JOINT_ACCEL_FORWARD;		// joint motor, accel forward
	else
	{
		command = CMD_JOINT_ACCEL_REVERSE;		// joint motor, accel reverse
		speed = -speed;
     a74:	70 95       	com	r23
     a76:	61 95       	neg	r22
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	86 ee       	ldi	r24, 0xE6	; 230
	}

	sendMotorPWMCommand(command, (unsigned char) speed);
     a7c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     a80:	08 95       	ret

00000a82 <brakeJointMotor>:


// Variable braking for jointly controlled motor.  This command affects the
//  motor immediately.
void brakeJointMotor( unsigned char pwm )
{
     a82:	68 2f       	mov	r22, r24
	sendMotorPWMCommand(CMD_JOINT_BRAKE, pwm);
     a84:	80 e9       	ldi	r24, 0x90	; 144
     a86:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sendMotorPWMCommand>
}
     a8a:	08 95       	ret

00000a8c <enableJointMotorMode>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     a8c:	80 91 ce 01 	lds	r24, 0x01CE
     a90:	88 23       	and	r24, r24
     a92:	19 f0       	breq	.+6      	; 0xa9a <enableJointMotorMode+0xe>
		waitForTransmission();			//  hanging the wait loop
     a94:	0d b4       	in	r0, 0x2d	; 45
     a96:	07 fe       	sbrs	r0, 7
     a98:	fd cf       	rjmp	.-6      	; 0xa94 <enableJointMotorMode+0x8>
	SPDR = data;						// start transmission of data
     a9a:	87 ed       	ldi	r24, 0xD7	; 215
     a9c:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 ce 01 	sts	0x01CE, r24
// Enables the mega168 to respond to joint-motor commands while disabling
//  independent-motor commands.
void enableJointMotorMode()
{
	SPITransmit( CMD_ENABLE_JOINT_MOTOR_MODE );
}
     aa4:	08 95       	ret

00000aa6 <setM1BrakeDuration>:
//  of 127 will result in a brake duration of 1.27s.  If brakeDuration is zero,
//  there is no braking before an acceleration direction change.  brakeDuration
//  must be 127 or less.  These functions will only work with X2 firmware
//  versions 1.01 or later.
void setM1BrakeDuration( unsigned char brakeDuration )
{
     aa6:	98 2f       	mov	r25, r24
	if ( brakeDuration > 127 )
     aa8:	87 fd       	sbrc	r24, 7
     aaa:	9f e7       	ldi	r25, 0x7F	; 127


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     aac:	80 91 ce 01 	lds	r24, 0x01CE
     ab0:	88 23       	and	r24, r24
     ab2:	19 f0       	breq	.+6      	; 0xaba <setM1BrakeDuration+0x14>
		waitForTransmission();			//  hanging the wait loop
     ab4:	0d b4       	in	r0, 0x2d	; 45
     ab6:	07 fe       	sbrs	r0, 7
     ab8:	fd cf       	rjmp	.-6      	; 0xab4 <setM1BrakeDuration+0xe>
	SPDR = data;						// start transmission of data
     aba:	8c eb       	ldi	r24, 0xBC	; 188
     abc:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     abe:	0d b4       	in	r0, 0x2d	; 45
     ac0:	07 fe       	sbrs	r0, 7
     ac2:	fd cf       	rjmp	.-6      	; 0xabe <setM1BrakeDuration+0x18>
	SPDR = data;						// start transmission of data
     ac4:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 ce 01 	sts	0x01CE, r24
{
	if ( brakeDuration > 127 )
		brakeDuration = 127;
	SPITransmit( CMD_SET_M1_BRAKE_DURATION );
	SPITransmit( brakeDuration );
}
     acc:	08 95       	ret

00000ace <setM2BrakeDuration>:

void setM2BrakeDuration( unsigned char brakeDuration )
{
     ace:	98 2f       	mov	r25, r24
	if ( brakeDuration > 127 )
     ad0:	87 fd       	sbrc	r24, 7
     ad2:	9f e7       	ldi	r25, 0x7F	; 127


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     ad4:	80 91 ce 01 	lds	r24, 0x01CE
     ad8:	88 23       	and	r24, r24
     ada:	19 f0       	breq	.+6      	; 0xae2 <setM2BrakeDuration+0x14>
		waitForTransmission();			//  hanging the wait loop
     adc:	0d b4       	in	r0, 0x2d	; 45
     ade:	07 fe       	sbrs	r0, 7
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <setM2BrakeDuration+0xe>
	SPDR = data;						// start transmission of data
     ae2:	8e eb       	ldi	r24, 0xBE	; 190
     ae4:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <setM2BrakeDuration+0x18>
	SPDR = data;						// start transmission of data
     aec:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 ce 01 	sts	0x01CE, r24
{
	if ( brakeDuration > 127 )
		brakeDuration = 127;
	SPITransmit( CMD_SET_M2_BRAKE_DURATION );
	SPITransmit( brakeDuration );
}
     af4:	08 95       	ret

00000af6 <setM1Acceleration>:
// Sets the accelerations used by the accelMotor functions. Acceleration 
//  commands cause the motor's pwm to be incremented by accel/10 every
//  10ms.  The net effect is that the pwm increases by accel every 100ms.
//  An accel of zero = "infinite" acceleration.  Accel must be 127 or less.
void setM1Acceleration( unsigned char accel )
{
     af6:	98 2f       	mov	r25, r24
	if ( accel > 127 )
     af8:	87 fd       	sbrc	r24, 7
     afa:	9f e7       	ldi	r25, 0x7F	; 127


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     afc:	80 91 ce 01 	lds	r24, 0x01CE
     b00:	88 23       	and	r24, r24
     b02:	19 f0       	breq	.+6      	; 0xb0a <setM1Acceleration+0x14>
		waitForTransmission();			//  hanging the wait loop
     b04:	0d b4       	in	r0, 0x2d	; 45
     b06:	07 fe       	sbrs	r0, 7
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <setM1Acceleration+0xe>
	SPDR = data;						// start transmission of data
     b0a:	80 ed       	ldi	r24, 0xD0	; 208
     b0c:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <setM1Acceleration+0x18>
	SPDR = data;						// start transmission of data
     b14:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 ce 01 	sts	0x01CE, r24
{
	if ( accel > 127 )
		accel= 127;
	SPITransmit( CMD_SET_M1_ACCELERATION );
	SPITransmit( accel );
}
     b1c:	08 95       	ret

00000b1e <setM2Acceleration>:

void setM2Acceleration( unsigned char accel )
{
     b1e:	98 2f       	mov	r25, r24
	if ( accel > 127 )
     b20:	87 fd       	sbrc	r24, 7
     b22:	9f e7       	ldi	r25, 0x7F	; 127


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     b24:	80 91 ce 01 	lds	r24, 0x01CE
     b28:	88 23       	and	r24, r24
     b2a:	19 f0       	breq	.+6      	; 0xb32 <setM2Acceleration+0x14>
		waitForTransmission();			//  hanging the wait loop
     b2c:	0d b4       	in	r0, 0x2d	; 45
     b2e:	07 fe       	sbrs	r0, 7
     b30:	fd cf       	rjmp	.-6      	; 0xb2c <setM2Acceleration+0xe>
	SPDR = data;						// start transmission of data
     b32:	81 ed       	ldi	r24, 0xD1	; 209
     b34:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     b36:	0d b4       	in	r0, 0x2d	; 45
     b38:	07 fe       	sbrs	r0, 7
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <setM2Acceleration+0x18>
	SPDR = data;						// start transmission of data
     b3c:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	80 93 ce 01 	sts	0x01CE, r24
{
	if ( accel > 127 )
		accel = 127;
	SPITransmit( CMD_SET_M2_ACCELERATION );
	SPITransmit( accel );
}
     b44:	08 95       	ret

00000b46 <setPWMFrequencies>:
//  is frequency = 20MHz / prescaler / 2^bit-resolution
//  Arguments passed to this function should be the RESOLUTION_ and PRESCALER_
//  #defines in SPI.h.
void setPWMFrequencies( unsigned char M1Resolution, unsigned char M1Prescaler,
						unsigned char M2Resolution, unsigned char M2Prescaler)
{
     b46:	38 2f       	mov	r19, r24


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     b48:	80 91 ce 01 	lds	r24, 0x01CE
     b4c:	88 23       	and	r24, r24
     b4e:	19 f0       	breq	.+6      	; 0xb56 <setPWMFrequencies+0x10>
		waitForTransmission();			//  hanging the wait loop
     b50:	0d b4       	in	r0, 0x2d	; 45
     b52:	07 fe       	sbrs	r0, 7
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <setPWMFrequencies+0xa>
	SPDR = data;						// start transmission of data
     b56:	82 ed       	ldi	r24, 0xD2	; 210
     b58:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     b5a:	0d b4       	in	r0, 0x2d	; 45
     b5c:	07 fe       	sbrs	r0, 7
     b5e:	fd cf       	rjmp	.-6      	; 0xb5a <setPWMFrequencies+0x14>
		M1Prescaler = PRESCALER_1024;
	if ( M2Prescaler > PRESCALER_1024 )
		M2Prescaler = PRESCALER_1024;

	SPITransmit( CMD_SET_PWM_FREQUENCIES );
	SPITransmit( ( M2Resolution << 5 ) | ( M2Prescaler << 3 ) |
     b60:	64 30       	cpi	r22, 0x04	; 4
     b62:	08 f0       	brcs	.+2      	; 0xb66 <setPWMFrequencies+0x20>
     b64:	63 e0       	ldi	r22, 0x03	; 3
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	33 23       	and	r19, r19
     b6c:	11 f0       	breq	.+4      	; 0xb72 <setPWMFrequencies+0x2c>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	68 2b       	or	r22, r24
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	44 23       	and	r20, r20
     b82:	11 f0       	breq	.+4      	; 0xb88 <setPWMFrequencies+0x42>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	35 e0       	ldi	r19, 0x05	; 5
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	3a 95       	dec	r19
     b90:	e1 f7       	brne	.-8      	; 0xb8a <setPWMFrequencies+0x44>
     b92:	68 2b       	or	r22, r24
     b94:	24 30       	cpi	r18, 0x04	; 4
     b96:	08 f0       	brcs	.+2      	; 0xb9a <setPWMFrequencies+0x54>
     b98:	23 e0       	ldi	r18, 0x03	; 3
     b9a:	22 0f       	add	r18, r18
     b9c:	22 0f       	add	r18, r18
     b9e:	22 0f       	add	r18, r18
     ba0:	62 2b       	or	r22, r18
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     ba2:	6e bd       	out	0x2e, r22	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 ce 01 	sts	0x01CE, r24
		M2Prescaler = PRESCALER_1024;

	SPITransmit( CMD_SET_PWM_FREQUENCIES );
	SPITransmit( ( M2Resolution << 5 ) | ( M2Prescaler << 3 ) |
				 ( M1Resolution << 2 ) |   M1Prescaler );
}
     baa:	08 95       	ret

00000bac <setNumCurrentSamples>:
//  M2 average current averages the last 2 ^ M2Exponent samples
//  The exponents may range from 0 - 7 (which equates to 1, 2, 4, 8, 16, 32,
//  64, or 128 samples).  More samples means less noise, but it also means
//  older data is affecting your present measurement.
void setNumCurrentSamples( unsigned char M1Exponent, unsigned char M2Exponent)
{
     bac:	98 2f       	mov	r25, r24


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     bae:	80 91 ce 01 	lds	r24, 0x01CE
     bb2:	88 23       	and	r24, r24
     bb4:	19 f0       	breq	.+6      	; 0xbbc <setNumCurrentSamples+0x10>
		waitForTransmission();			//  hanging the wait loop
     bb6:	0d b4       	in	r0, 0x2d	; 45
     bb8:	07 fe       	sbrs	r0, 7
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <setNumCurrentSamples+0xa>
	SPDR = data;						// start transmission of data
     bbc:	84 ed       	ldi	r24, 0xD4	; 212
     bbe:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     bc0:	0d b4       	in	r0, 0x2d	; 45
     bc2:	07 fe       	sbrs	r0, 7
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <setNumCurrentSamples+0x14>
	if ( M1Exponent > 7 )
		M1Exponent = 7;
	if ( M2Exponent > 7 )
		M2Exponent = 7;
	SPITransmit( CMD_SET_NUM_CURRENT_SAMPLES );
	SPITransmit( ( M2Exponent << 3 ) | M1Exponent );
     bc6:	68 30       	cpi	r22, 0x08	; 8
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <setNumCurrentSamples+0x20>
     bca:	67 e0       	ldi	r22, 0x07	; 7
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	e3 e0       	ldi	r30, 0x03	; 3
     bd0:	66 0f       	add	r22, r22
     bd2:	77 1f       	adc	r23, r23
     bd4:	ea 95       	dec	r30
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <setNumCurrentSamples+0x24>
     bd8:	89 2f       	mov	r24, r25
     bda:	98 30       	cpi	r25, 0x08	; 8
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <setNumCurrentSamples+0x34>
     bde:	87 e0       	ldi	r24, 0x07	; 7
     be0:	86 2b       	or	r24, r22
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     be2:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 ce 01 	sts	0x01CE, r24
		M1Exponent = 7;
	if ( M2Exponent > 7 )
		M2Exponent = 7;
	SPITransmit( CMD_SET_NUM_CURRENT_SAMPLES );
	SPITransmit( ( M2Exponent << 3 ) | M1Exponent );
}
     bea:	08 95       	ret

00000bec <setM1CurrentLimit>:
// P * (current - limit).  The PWM will never increase by an amount greater
// than P * | limit - current | while accelerating, either.  There are
// no restrictions on limit; P must be no greater than 127.  These functions
// will only work with X2 firmware version 1.01 or later.
void setM1CurrentLimit( unsigned char limit, unsigned char P )
{
     bec:	98 2f       	mov	r25, r24
	if (P > 127)
     bee:	67 fd       	sbrc	r22, 7
     bf0:	6f e7       	ldi	r22, 0x7F	; 127


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     bf2:	80 91 ce 01 	lds	r24, 0x01CE
     bf6:	88 23       	and	r24, r24
     bf8:	19 f0       	breq	.+6      	; 0xc00 <setM1CurrentLimit+0x14>
		waitForTransmission();			//  hanging the wait loop
     bfa:	0d b4       	in	r0, 0x2d	; 45
     bfc:	07 fe       	sbrs	r0, 7
     bfe:	fd cf       	rjmp	.-6      	; 0xbfa <setM1CurrentLimit+0xe>
	SPDR = data;						// start transmission of data
     c00:	80 ec       	ldi	r24, 0xC0	; 192
     c02:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     c04:	0d b4       	in	r0, 0x2d	; 45
     c06:	07 fe       	sbrs	r0, 7
     c08:	fd cf       	rjmp	.-6      	; 0xc04 <setM1CurrentLimit+0x18>
void setM1CurrentLimit( unsigned char limit, unsigned char P )
{
	if (P > 127)
		P = 127;
	SPITransmit( CMD_SET_M1_CURRENT_LIMIT | ( limit & 0x80 ));
	SPITransmit( limit & 0x7F );
     c0a:	9f 77       	andi	r25, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     c0c:	9e bd       	out	0x2e, r25	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     c0e:	0d b4       	in	r0, 0x2d	; 45
     c10:	07 fe       	sbrs	r0, 7
     c12:	fd cf       	rjmp	.-6      	; 0xc0e <setM1CurrentLimit+0x22>
	SPDR = data;						// start transmission of data
     c14:	6e bd       	out	0x2e, r22	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 ce 01 	sts	0x01CE, r24
	if (P > 127)
		P = 127;
	SPITransmit( CMD_SET_M1_CURRENT_LIMIT | ( limit & 0x80 ));
	SPITransmit( limit & 0x7F );
	SPITransmit( P );
}
     c1c:	08 95       	ret

00000c1e <setM2CurrentLimit>:

void setM2CurrentLimit( unsigned char limit, unsigned char P )
{
     c1e:	98 2f       	mov	r25, r24
	if (P > 127)
     c20:	67 fd       	sbrc	r22, 7
     c22:	6f e7       	ldi	r22, 0x7F	; 127


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     c24:	80 91 ce 01 	lds	r24, 0x01CE
     c28:	88 23       	and	r24, r24
     c2a:	19 f0       	breq	.+6      	; 0xc32 <setM2CurrentLimit+0x14>
		waitForTransmission();			//  hanging the wait loop
     c2c:	0d b4       	in	r0, 0x2d	; 45
     c2e:	07 fe       	sbrs	r0, 7
     c30:	fd cf       	rjmp	.-6      	; 0xc2c <setM2CurrentLimit+0xe>
	SPDR = data;						// start transmission of data
     c32:	82 ec       	ldi	r24, 0xC2	; 194
     c34:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     c36:	0d b4       	in	r0, 0x2d	; 45
     c38:	07 fe       	sbrs	r0, 7
     c3a:	fd cf       	rjmp	.-6      	; 0xc36 <setM2CurrentLimit+0x18>
void setM2CurrentLimit( unsigned char limit, unsigned char P )
{
	if (P > 127)
		P = 127;
	SPITransmit( CMD_SET_M2_CURRENT_LIMIT | ( limit & 0x80 ));
	SPITransmit( limit & 0x7F );
     c3c:	9f 77       	andi	r25, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     c3e:	9e bd       	out	0x2e, r25	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     c40:	0d b4       	in	r0, 0x2d	; 45
     c42:	07 fe       	sbrs	r0, 7
     c44:	fd cf       	rjmp	.-6      	; 0xc40 <setM2CurrentLimit+0x22>
	SPDR = data;						// start transmission of data
     c46:	6e bd       	out	0x2e, r22	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 ce 01 	sts	0x01CE, r24
	if (P > 127)
		P = 127;
	SPITransmit( CMD_SET_M2_CURRENT_LIMIT | ( limit & 0x80 ));
	SPITransmit( limit & 0x7F );
	SPITransmit( P );
}
     c4e:	08 95       	ret

00000c50 <getM1Current>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     c50:	80 91 ce 01 	lds	r24, 0x01CE
     c54:	88 23       	and	r24, r24
     c56:	19 f0       	breq	.+6      	; 0xc5e <getM1Current+0xe>
		waitForTransmission();			//  hanging the wait loop
     c58:	0d b4       	in	r0, 0x2d	; 45
     c5a:	07 fe       	sbrs	r0, 7
     c5c:	fd cf       	rjmp	.-6      	; 0xc58 <getM1Current+0x8>
	SPDR = data;						// start transmission of data
     c5e:	88 ed       	ldi	r24, 0xD8	; 216
     c60:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
     c62:	0d b4       	in	r0, 0x2d	; 45
     c64:	07 fe       	sbrs	r0, 7
     c66:	fd cf       	rjmp	.-6      	; 0xc62 <getM1Current+0x12>
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	6f 93       	push	r22
     c6e:	64 e0       	ldi	r22, 0x04	; 4
     c70:	6a 95       	dec	r22
     c72:	f1 f7       	brne	.-4      	; 0xc70 <getM1Current+0x20>
     c74:	6f 91       	pop	r22
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	c9 f7       	brne	.-14     	; 0xc6c <getM1Current+0x1c>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
     c7a:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
     c7c:	0d b4       	in	r0, 0x2d	; 45
     c7e:	07 fe       	sbrs	r0, 7
     c80:	fd cf       	rjmp	.-6      	; 0xc7c <getM1Current+0x2c>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
     c82:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
     c86:	8e b5       	in	r24, 0x2e	; 46
// Get the running current average for the specified motor
unsigned char getM1Current()
{
	SPITransmit( CMD_GET_M1_CURRENT );
	return SPIReceive( 0 );
}
     c88:	08 95       	ret

00000c8a <getM2Current>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     c8a:	80 91 ce 01 	lds	r24, 0x01CE
     c8e:	88 23       	and	r24, r24
     c90:	19 f0       	breq	.+6      	; 0xc98 <getM2Current+0xe>
		waitForTransmission();			//  hanging the wait loop
     c92:	0d b4       	in	r0, 0x2d	; 45
     c94:	07 fe       	sbrs	r0, 7
     c96:	fd cf       	rjmp	.-6      	; 0xc92 <getM2Current+0x8>
	SPDR = data;						// start transmission of data
     c98:	89 ed       	ldi	r24, 0xD9	; 217
     c9a:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
     c9c:	0d b4       	in	r0, 0x2d	; 45
     c9e:	07 fe       	sbrs	r0, 7
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <getM2Current+0x12>
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	6f 93       	push	r22
     ca8:	64 e0       	ldi	r22, 0x04	; 4
     caa:	6a 95       	dec	r22
     cac:	f1 f7       	brne	.-4      	; 0xcaa <getM2Current+0x20>
     cae:	6f 91       	pop	r22
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	c9 f7       	brne	.-14     	; 0xca6 <getM2Current+0x1c>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
     cb4:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
     cb6:	0d b4       	in	r0, 0x2d	; 45
     cb8:	07 fe       	sbrs	r0, 7
     cba:	fd cf       	rjmp	.-6      	; 0xcb6 <getM2Current+0x2c>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
     cbc:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
     cc0:	8e b5       	in	r24, 0x2e	; 46

unsigned char getM2Current()
{
	SPITransmit( CMD_GET_M2_CURRENT );
	return SPIReceive( 0 );
}
     cc2:	08 95       	ret

00000cc4 <buzzerOff>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     cc4:	80 91 ce 01 	lds	r24, 0x01CE
     cc8:	88 23       	and	r24, r24
     cca:	19 f0       	breq	.+6      	; 0xcd2 <buzzerOff+0xe>
		waitForTransmission();			//  hanging the wait loop
     ccc:	0d b4       	in	r0, 0x2d	; 45
     cce:	07 fe       	sbrs	r0, 7
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <buzzerOff+0x8>
	SPDR = data;						// start transmission of data
     cd2:	81 ee       	ldi	r24, 0xE1	; 225
     cd4:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 ce 01 	sts	0x01CE, r24

// Silence the buzzer immediately
void buzzerOff()
{
	SPITransmit( CMD_BUZZER_OFF );
}
     cdc:	08 95       	ret

00000cde <playNote>:


// Play the specified note for the specified duration (in ms) immediately.
//  Note enumeration is provided as a set of #define macros in SPI.h.
void playNote( unsigned char note, unsigned int duration )
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <playNote+0x6>
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	48 2f       	mov	r20, r24
     cea:	7a 83       	std	Y+2, r23	; 0x02
     cec:	69 83       	std	Y+1, r22	; 0x01
	unsigned char *byte_ptr = (unsigned char*)&duration;
	unsigned char lo = *byte_ptr;		// low byte of duration
     cee:	56 2f       	mov	r21, r22
	unsigned char hi = *(byte_ptr + 1);	// high byte of duration
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     cf2:	80 91 ce 01 	lds	r24, 0x01CE
     cf6:	88 23       	and	r24, r24
     cf8:	19 f0       	breq	.+6      	; 0xd00 <playNote+0x22>
		waitForTransmission();			//  hanging the wait loop
     cfa:	0d b4       	in	r0, 0x2d	; 45
     cfc:	07 fe       	sbrs	r0, 7
     cfe:	fd cf       	rjmp	.-6      	; 0xcfa <playNote+0x1c>
	unsigned char *byte_ptr = (unsigned char*)&duration;
	unsigned char lo = *byte_ptr;		// low byte of duration
	unsigned char hi = *(byte_ptr + 1);	// high byte of duration

	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_PLAY_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
     d00:	84 2f       	mov	r24, r20
     d02:	88 1f       	adc	r24, r24
     d04:	88 27       	eor	r24, r24
     d06:	88 1f       	adc	r24, r24
     d08:	88 69       	ori	r24, 0x98	; 152
     d0a:	25 2f       	mov	r18, r21
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	20 78       	andi	r18, 0x80	; 128
     d10:	30 70       	andi	r19, 0x00	; 0
     d12:	a5 e0       	ldi	r26, 0x05	; 5
     d14:	35 95       	asr	r19
     d16:	27 95       	ror	r18
     d18:	aa 95       	dec	r26
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <playNote+0x36>
     d1c:	82 2b       	or	r24, r18
     d1e:	29 2f       	mov	r18, r25
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	20 78       	andi	r18, 0x80	; 128
     d24:	30 70       	andi	r19, 0x00	; 0
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	35 95       	asr	r19
     d2a:	27 95       	ror	r18
     d2c:	fa 95       	dec	r31
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <playNote+0x4a>
     d30:	82 2b       	or	r24, r18
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     d32:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     d34:	0d b4       	in	r0, 0x2d	; 45
     d36:	07 fe       	sbrs	r0, 7
     d38:	fd cf       	rjmp	.-6      	; 0xd34 <playNote+0x56>
	unsigned char hi = *(byte_ptr + 1);	// high byte of duration

	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_PLAY_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
							   | (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
     d3a:	4f 77       	andi	r20, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     d3c:	4e bd       	out	0x2e, r20	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     d3e:	0d b4       	in	r0, 0x2d	; 45
     d40:	07 fe       	sbrs	r0, 7
     d42:	fd cf       	rjmp	.-6      	; 0xd3e <playNote+0x60>

	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_PLAY_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
							   | (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
	SPITransmit(   hi & 0x7F );
     d44:	9f 77       	andi	r25, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     d46:	9e bd       	out	0x2e, r25	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     d48:	0d b4       	in	r0, 0x2d	; 45
     d4a:	07 fe       	sbrs	r0, 7
     d4c:	fd cf       	rjmp	.-6      	; 0xd48 <playNote+0x6a>
	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_PLAY_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
							   | (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
	SPITransmit(   hi & 0x7F );
	SPITransmit(   lo & 0x7F );
     d4e:	5f 77       	andi	r21, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     d50:	5e bd       	out	0x2e, r21	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 ce 01 	sts	0x01CE, r24
	SPITransmit( CMD_PLAY_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
							   | (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
	SPITransmit(   hi & 0x7F );
	SPITransmit(   lo & 0x7F );
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <playFrequency>:
//  immediately.  Frequency must be no greater than 0x7FFF (15-bit value).
//  The mega168 can only play frequencies as low as 40Hz and as high as
//  10kHz.  Values outside this range will just produce the nearest
//  allowed frequency.
void playFrequency( unsigned int frequency, unsigned int duration )
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <playFrequency+0x6>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <playFrequency+0x8>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	7c 83       	std	Y+4, r23	; 0x04
     d74:	6b 83       	std	Y+3, r22	; 0x03
	if ( frequency > 0x7FFF )
     d76:	97 ff       	sbrs	r25, 7
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <playFrequency+0x20>
		frequency = 0x7FFF;		// frequency must be a 15-bit value
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	9f e7       	ldi	r25, 0x7F	; 127
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01

	unsigned char *byte_ptr = (unsigned char*)&frequency;
	unsigned char loFreq = *byte_ptr;
     d82:	49 81       	ldd	r20, Y+1	; 0x01
	unsigned char hiFreq = *(byte_ptr + 1);
     d84:	6a 81       	ldd	r22, Y+2	; 0x02

	byte_ptr = (unsigned char*)&duration;
	unsigned char loDur = *byte_ptr;
     d86:	5b 81       	ldd	r21, Y+3	; 0x03
	unsigned char hiDur = *(byte_ptr + 1);
     d88:	9c 81       	ldd	r25, Y+4	; 0x04


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     d8a:	80 91 ce 01 	lds	r24, 0x01CE
     d8e:	88 23       	and	r24, r24
     d90:	19 f0       	breq	.+6      	; 0xd98 <playFrequency+0x36>
		waitForTransmission();			//  hanging the wait loop
     d92:	0d b4       	in	r0, 0x2d	; 45
     d94:	07 fe       	sbrs	r0, 7
     d96:	fd cf       	rjmp	.-6      	; 0xd92 <playFrequency+0x30>
	unsigned char loDur = *byte_ptr;
	unsigned char hiDur = *(byte_ptr + 1);

	// insert the MSBs of the two duration bytes and the low frequency byte
	//  MSB of the high frequency byte is guaranteed to be zero
	SPITransmit( CMD_PLAY_FREQUENCY | ((  loDur & 0x80) >> 5 )
     d98:	84 2f       	mov	r24, r20
     d9a:	88 1f       	adc	r24, r24
     d9c:	88 27       	eor	r24, r24
     d9e:	88 1f       	adc	r24, r24
     da0:	80 6a       	ori	r24, 0xA0	; 160
     da2:	25 2f       	mov	r18, r21
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	20 78       	andi	r18, 0x80	; 128
     da8:	30 70       	andi	r19, 0x00	; 0
     daa:	75 e0       	ldi	r23, 0x05	; 5
     dac:	35 95       	asr	r19
     dae:	27 95       	ror	r18
     db0:	7a 95       	dec	r23
     db2:	e1 f7       	brne	.-8      	; 0xdac <playFrequency+0x4a>
     db4:	82 2b       	or	r24, r18
     db6:	29 2f       	mov	r18, r25
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	20 78       	andi	r18, 0x80	; 128
     dbc:	30 70       	andi	r19, 0x00	; 0
     dbe:	b6 e0       	ldi	r27, 0x06	; 6
     dc0:	35 95       	asr	r19
     dc2:	27 95       	ror	r18
     dc4:	ba 95       	dec	r27
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <playFrequency+0x5e>
     dc8:	82 2b       	or	r24, r18
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     dca:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     dcc:	0d b4       	in	r0, 0x2d	; 45
     dce:	07 fe       	sbrs	r0, 7
     dd0:	fd cf       	rjmp	.-6      	; 0xdcc <playFrequency+0x6a>
	SPDR = data;						// start transmission of data
     dd2:	6e bd       	out	0x2e, r22	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     dd4:	0d b4       	in	r0, 0x2d	; 45
     dd6:	07 fe       	sbrs	r0, 7
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <playFrequency+0x72>
	//  MSB of the high frequency byte is guaranteed to be zero
	SPITransmit( CMD_PLAY_FREQUENCY | ((  loDur & 0x80) >> 5 )
									| ((  hiDur & 0x80) >> 6 )
									| (( loFreq & 0x80) >> 7 ));
	SPITransmit( hiFreq );
	SPITransmit( loFreq & 0x7F );
     dda:	4f 77       	andi	r20, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     ddc:	4e bd       	out	0x2e, r20	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     dde:	0d b4       	in	r0, 0x2d	; 45
     de0:	07 fe       	sbrs	r0, 7
     de2:	fd cf       	rjmp	.-6      	; 0xdde <playFrequency+0x7c>
	SPITransmit( CMD_PLAY_FREQUENCY | ((  loDur & 0x80) >> 5 )
									| ((  hiDur & 0x80) >> 6 )
									| (( loFreq & 0x80) >> 7 ));
	SPITransmit( hiFreq );
	SPITransmit( loFreq & 0x7F );
	SPITransmit(  hiDur & 0x7F );
     de4:	9f 77       	andi	r25, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     de6:	9e bd       	out	0x2e, r25	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     de8:	0d b4       	in	r0, 0x2d	; 45
     dea:	07 fe       	sbrs	r0, 7
     dec:	fd cf       	rjmp	.-6      	; 0xde8 <playFrequency+0x86>
									| ((  hiDur & 0x80) >> 6 )
									| (( loFreq & 0x80) >> 7 ));
	SPITransmit( hiFreq );
	SPITransmit( loFreq & 0x7F );
	SPITransmit(  hiDur & 0x7F );
	SPITransmit(  loDur & 0x7F );
     dee:	5f 77       	andi	r21, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     df0:	5e bd       	out	0x2e, r21	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 93 ce 01 	sts	0x01CE, r24
									| (( loFreq & 0x80) >> 7 ));
	SPITransmit( hiFreq );
	SPITransmit( loFreq & 0x7F );
	SPITransmit(  hiDur & 0x7F );
	SPITransmit(  loDur & 0x7F );
}
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <setVolume>:

// Sets the volume of the buzzer by changing the duty cycle of the pwm driving
//  it.  buzzer duty cycle = 1 >> ( 16 - volume ).  volume must range from
//  0 - 15.
void setVolume( unsigned char volume )
{
     e06:	98 2f       	mov	r25, r24


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     e08:	80 91 ce 01 	lds	r24, 0x01CE
     e0c:	88 23       	and	r24, r24
     e0e:	19 f0       	breq	.+6      	; 0xe16 <setVolume+0x10>
		waitForTransmission();			//  hanging the wait loop
     e10:	0d b4       	in	r0, 0x2d	; 45
     e12:	07 fe       	sbrs	r0, 7
     e14:	fd cf       	rjmp	.-6      	; 0xe10 <setVolume+0xa>
	SPDR = data;						// start transmission of data
     e16:	82 ee       	ldi	r24, 0xE2	; 226
     e18:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     e1a:	0d b4       	in	r0, 0x2d	; 45
     e1c:	07 fe       	sbrs	r0, 7
     e1e:	fd cf       	rjmp	.-6      	; 0xe1a <setVolume+0x14>
     e20:	89 2f       	mov	r24, r25
     e22:	90 31       	cpi	r25, 0x10	; 16
     e24:	08 f0       	brcs	.+2      	; 0xe28 <setVolume+0x22>
     e26:	8f e0       	ldi	r24, 0x0F	; 15
	SPDR = data;						// start transmission of data
     e28:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 ce 01 	sts	0x01CE, r24
{
	if ( volume > 15 )
		volume = 15;		// must be a 4-bit value
	SPITransmit( CMD_SET_VOLUME );
	SPITransmit( volume );
}
     e30:	08 95       	ret

00000e32 <setNoteGap>:


// noteGap determines the silent pause (in ms) that's inserted after every note
//  the buzzer plays.  noteGap must be no greater than 127.
void setNoteGap( unsigned char noteGap )
{
     e32:	98 2f       	mov	r25, r24
	if ( noteGap > 127 )
     e34:	87 fd       	sbrc	r24, 7
     e36:	9f e7       	ldi	r25, 0x7F	; 127


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     e38:	80 91 ce 01 	lds	r24, 0x01CE
     e3c:	88 23       	and	r24, r24
     e3e:	19 f0       	breq	.+6      	; 0xe46 <setNoteGap+0x14>
		waitForTransmission();			//  hanging the wait loop
     e40:	0d b4       	in	r0, 0x2d	; 45
     e42:	07 fe       	sbrs	r0, 7
     e44:	fd cf       	rjmp	.-6      	; 0xe40 <setNoteGap+0xe>
	SPDR = data;						// start transmission of data
     e46:	8b eb       	ldi	r24, 0xBB	; 187
     e48:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     e4a:	0d b4       	in	r0, 0x2d	; 45
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <setNoteGap+0x18>
	SPDR = data;						// start transmission of data
     e50:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 ce 01 	sts	0x01CE, r24
{
	if ( noteGap > 127 )
		noteGap = 127;
	SPITransmit( CMD_SET_NOTE_GAP );
	SPITransmit( noteGap );
}
     e58:	08 95       	ret

00000e5a <sendSerial>:
// ***********************************************************************

// Send a byte to the mega168 to be queued for transmission over the UART.
//  While queued the byte will reside in the mega168's UART send buffer.
void sendSerial( unsigned char data )
{
     e5a:	98 2f       	mov	r25, r24


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     e5c:	80 91 ce 01 	lds	r24, 0x01CE
     e60:	88 23       	and	r24, r24
     e62:	19 f0       	breq	.+6      	; 0xe6a <sendSerial+0x10>
		waitForTransmission();			//  hanging the wait loop
     e64:	0d b4       	in	r0, 0x2d	; 45
     e66:	07 fe       	sbrs	r0, 7
     e68:	fd cf       	rjmp	.-6      	; 0xe64 <sendSerial+0xa>

// Send a byte to the mega168 to be queued for transmission over the UART.
//  While queued the byte will reside in the mega168's UART send buffer.
void sendSerial( unsigned char data )
{
	SPITransmit( CMD_SEND_SERIAL | (( data & 0x80 ) >> 7 ));
     e6a:	89 2f       	mov	r24, r25
     e6c:	88 1f       	adc	r24, r24
     e6e:	88 27       	eor	r24, r24
     e70:	88 1f       	adc	r24, r24
     e72:	8c 6d       	ori	r24, 0xDC	; 220
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     e74:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     e76:	0d b4       	in	r0, 0x2d	; 45
     e78:	07 fe       	sbrs	r0, 7
     e7a:	fd cf       	rjmp	.-6      	; 0xe76 <sendSerial+0x1c>
// Send a byte to the mega168 to be queued for transmission over the UART.
//  While queued the byte will reside in the mega168's UART send buffer.
void sendSerial( unsigned char data )
{
	SPITransmit( CMD_SEND_SERIAL | (( data & 0x80 ) >> 7 ));
	SPITransmit( data & 0x7F );
     e7c:	9f 77       	andi	r25, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     e7e:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 ce 01 	sts	0x01CE, r24
//  While queued the byte will reside in the mega168's UART send buffer.
void sendSerial( unsigned char data )
{
	SPITransmit( CMD_SEND_SERIAL | (( data & 0x80 ) >> 7 ));
	SPITransmit( data & 0x7F );
}
     e86:	08 95       	ret

00000e88 <readSerial>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     e88:	80 91 ce 01 	lds	r24, 0x01CE
     e8c:	88 23       	and	r24, r24
     e8e:	19 f0       	breq	.+6      	; 0xe96 <readSerial+0xe>
		waitForTransmission();			//  hanging the wait loop
     e90:	0d b4       	in	r0, 0x2d	; 45
     e92:	07 fe       	sbrs	r0, 7
     e94:	fd cf       	rjmp	.-6      	; 0xe90 <readSerial+0x8>
	SPDR = data;						// start transmission of data
     e96:	8b ed       	ldi	r24, 0xDB	; 219
     e98:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
     e9a:	0d b4       	in	r0, 0x2d	; 45
     e9c:	07 fe       	sbrs	r0, 7
     e9e:	fd cf       	rjmp	.-6      	; 0xe9a <readSerial+0x12>
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	6f 93       	push	r22
     ea6:	64 e0       	ldi	r22, 0x04	; 4
     ea8:	6a 95       	dec	r22
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <readSerial+0x20>
     eac:	6f 91       	pop	r22
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	c9 f7       	brne	.-14     	; 0xea4 <readSerial+0x1c>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
     eb2:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
     eb4:	0d b4       	in	r0, 0x2d	; 45
     eb6:	07 fe       	sbrs	r0, 7
     eb8:	fd cf       	rjmp	.-6      	; 0xeb4 <readSerial+0x2c>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
     eba:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
     ebe:	8e b5       	in	r24, 0x2e	; 46
// Retrieve the next byte from the mega168's UART read buffer.
unsigned char readSerial()
{
	SPITransmit( CMD_READ_SERIAL );
	return SPIReceive( 0 );		// junk data byte
}
     ec0:	08 95       	ret

00000ec2 <fastSerialRead>:
//  is large it can reach approximately 7us per data byte read, which is
//  equivalent to a baud rate of approximately 1Mbps.  This function would
//  be good to use in conjunction with setReadReadySize(numBytes) if you're
//  dealing with serial data packets of known sizes.
void fastSerialRead( unsigned char numBytes, unsigned char data[] )
{
     ec2:	1f 93       	push	r17
     ec4:	58 2f       	mov	r21, r24
     ec6:	db 01       	movw	r26, r22


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     ec8:	80 91 ce 01 	lds	r24, 0x01CE
     ecc:	88 23       	and	r24, r24
     ece:	19 f0       	breq	.+6      	; 0xed6 <fastSerialRead+0x14>
		waitForTransmission();			//  hanging the wait loop
     ed0:	0d b4       	in	r0, 0x2d	; 45
     ed2:	07 fe       	sbrs	r0, 7
     ed4:	fd cf       	rjmp	.-6      	; 0xed0 <fastSerialRead+0xe>
	SPDR = data;						// start transmission of data
     ed6:	8b ed       	ldi	r24, 0xDB	; 219
     ed8:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 ce 01 	sts	0x01CE, r24
void fastSerialRead( unsigned char numBytes, unsigned char data[] )
{
	unsigned char i;

	SPITransmit( CMD_READ_SERIAL );				// transmit first read command
	waitForTransmission();
     ee0:	0d b4       	in	r0, 0x2d	; 45
     ee2:	07 fe       	sbrs	r0, 7
     ee4:	fd cf       	rjmp	.-6      	; 0xee0 <fastSerialRead+0x1e>
     ee6:	40 e0       	ldi	r20, 0x00	; 0

	for ( i = 0; i < numBytes - 1; i++ )
     ee8:	25 2f       	mov	r18, r21
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	21 50       	subi	r18, 0x01	; 1
     eee:	30 40       	sbci	r19, 0x00	; 0
     ef0:	63 e0       	ldi	r22, 0x03	; 3
     ef2:	70 e0       	ldi	r23, 0x00	; 0
	{
		delay_us( 3 );				// give mega168 time to prepare return val
		SPDR = CMD_READ_SERIAL;		// start bidirectional data transfer:
     ef4:	1b ed       	ldi	r17, 0xDB	; 219
     ef6:	12 c0       	rjmp	.+36     	; 0xf1c <fastSerialRead+0x5a>
     ef8:	cb 01       	movw	r24, r22
     efa:	6f 93       	push	r22
     efc:	64 e0       	ldi	r22, 0x04	; 4
     efe:	6a 95       	dec	r22
     f00:	f1 f7       	brne	.-4      	; 0xefe <fastSerialRead+0x3c>
     f02:	6f 91       	pop	r22
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	c9 f7       	brne	.-14     	; 0xefa <fastSerialRead+0x38>
     f08:	1e bd       	out	0x2e, r17	; 46
		waitForTransmission();		//  send command while reading return value
     f0a:	0d b4       	in	r0, 0x2d	; 45
     f0c:	07 fe       	sbrs	r0, 7
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <fastSerialRead+0x48>
		data[ i ] = SPDR;						// buffer returned byte
     f10:	8e b5       	in	r24, 0x2e	; 46
     f12:	fd 01       	movw	r30, r26
     f14:	e4 0f       	add	r30, r20
     f16:	f1 1d       	adc	r31, r1
     f18:	80 83       	st	Z, r24
	unsigned char i;

	SPITransmit( CMD_READ_SERIAL );				// transmit first read command
	waitForTransmission();

	for ( i = 0; i < numBytes - 1; i++ )
     f1a:	4f 5f       	subi	r20, 0xFF	; 255
     f1c:	84 2f       	mov	r24, r20
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	82 17       	cp	r24, r18
     f22:	93 07       	cpc	r25, r19
     f24:	4c f3       	brlt	.-46     	; 0xef8 <fastSerialRead+0x36>
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	6f 93       	push	r22
     f2c:	64 e0       	ldi	r22, 0x04	; 4
     f2e:	6a 95       	dec	r22
     f30:	f1 f7       	brne	.-4      	; 0xf2e <fastSerialRead+0x6c>
     f32:	6f 91       	pop	r22
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	c9 f7       	brne	.-14     	; 0xf2a <fastSerialRead+0x68>
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
     f38:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
     f3a:	0d b4       	in	r0, 0x2d	; 45
     f3c:	07 fe       	sbrs	r0, 7
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <fastSerialRead+0x78>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
     f40:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
     f44:	8e b5       	in	r24, 0x2e	; 46
		waitForTransmission();		//  send command while reading return value
		data[ i ] = SPDR;						// buffer returned byte
	}

	SPITransmitting = 0;					// flag we are not transmitting
	data[ numBytes - 1 ] = SPIReceive( 0 );	// send junk to get last data byte
     f46:	a5 0f       	add	r26, r21
     f48:	b1 1d       	adc	r27, r1
     f4a:	11 97       	sbiw	r26, 0x01	; 1
     f4c:	8c 93       	st	X, r24
}
     f4e:	1f 91       	pop	r17
     f50:	08 95       	ret

00000f52 <enablePermanentProgMode>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     f52:	80 91 ce 01 	lds	r24, 0x01CE
     f56:	88 23       	and	r24, r24
     f58:	19 f0       	breq	.+6      	; 0xf60 <enablePermanentProgMode+0xe>
		waitForTransmission();			//  hanging the wait loop
     f5a:	0d b4       	in	r0, 0x2d	; 45
     f5c:	07 fe       	sbrs	r0, 7
     f5e:	fd cf       	rjmp	.-6      	; 0xf5a <enablePermanentProgMode+0x8>
	SPDR = data;						// start transmission of data
     f60:	88 ec       	ldi	r24, 0xC8	; 200
     f62:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     f64:	0d b4       	in	r0, 0x2d	; 45
     f66:	07 fe       	sbrs	r0, 7
     f68:	fd cf       	rjmp	.-6      	; 0xf64 <enablePermanentProgMode+0x12>
	SPDR = data;						// start transmission of data
     f6a:	80 e4       	ldi	r24, 0x40	; 64
     f6c:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     f6e:	0d b4       	in	r0, 0x2d	; 45
     f70:	07 fe       	sbrs	r0, 7
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <enablePermanentProgMode+0x1c>
	SPDR = data;						// start transmission of data
     f74:	1e bc       	out	0x2e, r1	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 ce 01 	sts	0x01CE, r24
void enablePermanentProgMode()
{
	SPITransmit( CMD_SET_SERIAL );
	SPITransmit( 0x40 );
	SPITransmit( 0 );
}
     f7c:	08 95       	ret

00000f7e <setSerial>:
//  UART #defines in SPI.h.  speedMode is either UART_NORMAL_SPEED or
//  UART_DOUBLE_SPEED.  This command will disable permanent progmode
//  if it's enabled.
void setSerial( unsigned char parity, unsigned char stopBits,
			   unsigned char speedMode, unsigned int UBRR )
{
     f7e:	58 2f       	mov	r21, r24
	// ensure parameter values are all valid
	if (( parity != UART_EVEN_PARITY ) && ( parity != UART_ODD_PARITY ))
     f80:	82 50       	subi	r24, 0x02	; 2
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	08 f0       	brcs	.+2      	; 0xf88 <setSerial+0xa>
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	88 e0       	ldi	r24, 0x08	; 8
     f8a:	20 30       	cpi	r18, 0x00	; 0
     f8c:	38 07       	cpc	r19, r24
     f8e:	10 f0       	brcs	.+4      	; 0xf94 <setSerial+0x16>
     f90:	2f ef       	ldi	r18, 0xFF	; 255
     f92:	37 e0       	ldi	r19, 0x07	; 7


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
     f94:	80 91 ce 01 	lds	r24, 0x01CE
     f98:	88 23       	and	r24, r24
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <setSerial+0x24>
		waitForTransmission();			//  hanging the wait loop
     f9c:	0d b4       	in	r0, 0x2d	; 45
     f9e:	07 fe       	sbrs	r0, 7
     fa0:	fd cf       	rjmp	.-6      	; 0xf9c <setSerial+0x1e>
		stopBits = UART_TWO_STOP_BITS;
	if ( speedMode != UART_NORMAL_SPEED )
		speedMode = UART_DOUBLE_SPEED;
	if ( UBRR > 2047 )					// UBRR must be an 11-bit value
		UBRR = 2047;
	SPITransmit( CMD_SET_SERIAL | ( parity << 1 ));
     fa2:	55 0f       	add	r21, r21
     fa4:	58 6c       	ori	r21, 0xC8	; 200
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     fa6:	5e bd       	out	0x2e, r21	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     fa8:	0d b4       	in	r0, 0x2d	; 45
     faa:	07 fe       	sbrs	r0, 7
     fac:	fd cf       	rjmp	.-6      	; 0xfa8 <setSerial+0x2a>
	if ( speedMode != UART_NORMAL_SPEED )
		speedMode = UART_DOUBLE_SPEED;
	if ( UBRR > 2047 )					// UBRR must be an 11-bit value
		UBRR = 2047;
	SPITransmit( CMD_SET_SERIAL | ( parity << 1 ));
	SPITransmit( ( stopBits << 5 ) | ( speedMode << 4 ) |
     fae:	f9 01       	movw	r30, r18
     fb0:	e0 78       	andi	r30, 0x80	; 128
     fb2:	f7 70       	andi	r31, 0x07	; 7
     fb4:	ee 0f       	add	r30, r30
     fb6:	ef 2f       	mov	r30, r31
     fb8:	ee 1f       	adc	r30, r30
     fba:	ff 0b       	sbc	r31, r31
     fbc:	f1 95       	neg	r31
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	44 23       	and	r20, r20
     fc4:	11 f0       	breq	.+4      	; 0xfca <setSerial+0x4c>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a4 e0       	ldi	r26, 0x04	; 4
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	aa 95       	dec	r26
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <setSerial+0x4e>
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	66 23       	and	r22, r22
     fda:	11 f0       	breq	.+4      	; 0xfe0 <setSerial+0x62>
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	f5 e0       	ldi	r31, 0x05	; 5
     fe2:	44 0f       	add	r20, r20
     fe4:	55 1f       	adc	r21, r21
     fe6:	fa 95       	dec	r31
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <setSerial+0x64>
     fea:	84 2b       	or	r24, r20
     fec:	8e 2b       	or	r24, r30
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     fee:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
     ff0:	0d b4       	in	r0, 0x2d	; 45
     ff2:	07 fe       	sbrs	r0, 7
     ff4:	fd cf       	rjmp	.-6      	; 0xff0 <setSerial+0x72>
	if ( UBRR > 2047 )					// UBRR must be an 11-bit value
		UBRR = 2047;
	SPITransmit( CMD_SET_SERIAL | ( parity << 1 ));
	SPITransmit( ( stopBits << 5 ) | ( speedMode << 4 ) |
				(( UBRR & 0x0780 ) >> 7 ));	// send the four MSBs of UBRR
	SPITransmit( UBRR & 0x007F );			// send the seven LSBs of UBBR
     ff6:	82 2f       	mov	r24, r18
     ff8:	8f 77       	andi	r24, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
     ffa:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 ce 01 	sts	0x01CE, r24
		UBRR = 2047;
	SPITransmit( CMD_SET_SERIAL | ( parity << 1 ));
	SPITransmit( ( stopBits << 5 ) | ( speedMode << 4 ) |
				(( UBRR & 0x0780 ) >> 7 ));	// send the four MSBs of UBRR
	SPITransmit( UBRR & 0x007F );			// send the seven LSBs of UBBR
}
    1002:	08 95       	ret

00001004 <setReadReadySize>:


// Determines how many bytes must be in the UART read buffer before the status
//  byte and attention line indicate that it is ready to be read.
void setReadReadySize( unsigned char rrSize )
{
    1004:	98 2f       	mov	r25, r24
	// rrSize must be in the range of 1 - UART_READ_BUFF_SZ (32)
	if ( rrSize == 0 )
    1006:	88 23       	and	r24, r24
    1008:	11 f4       	brne	.+4      	; 0x100e <setReadReadySize+0xa>
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <setReadReadySize+0x10>
		rrSize = 1;
	if ( rrSize > UART_READ_BUFF_SZ )
    100e:	81 32       	cpi	r24, 0x21	; 33
    1010:	08 f0       	brcs	.+2      	; 0x1014 <setReadReadySize+0x10>
    1012:	90 e2       	ldi	r25, 0x20	; 32


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    1014:	80 91 ce 01 	lds	r24, 0x01CE
    1018:	88 23       	and	r24, r24
    101a:	19 f0       	breq	.+6      	; 0x1022 <setReadReadySize+0x1e>
		waitForTransmission();			//  hanging the wait loop
    101c:	0d b4       	in	r0, 0x2d	; 45
    101e:	07 fe       	sbrs	r0, 7
    1020:	fd cf       	rjmp	.-6      	; 0x101c <setReadReadySize+0x18>
	SPDR = data;						// start transmission of data
    1022:	83 ee       	ldi	r24, 0xE3	; 227
    1024:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    1026:	0d b4       	in	r0, 0x2d	; 45
    1028:	07 fe       	sbrs	r0, 7
    102a:	fd cf       	rjmp	.-6      	; 0x1026 <setReadReadySize+0x22>
	if ( rrSize == 0 )
		rrSize = 1;
	if ( rrSize > UART_READ_BUFF_SZ )
		rrSize = UART_READ_BUFF_SZ;
	SPITransmit( CMD_SET_READ_READY_SIZE );
	SPITransmit( rrSize - 1 );	// transmit one less than desired value
    102c:	91 50       	subi	r25, 0x01	; 1
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    102e:	9e bd       	out	0x2e, r25	; 46
	SPITransmitting = 1;				// flag transmission is in progress
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	80 93 ce 01 	sts	0x01CE, r24
		rrSize = 1;
	if ( rrSize > UART_READ_BUFF_SZ )
		rrSize = UART_READ_BUFF_SZ;
	SPITransmit( CMD_SET_READ_READY_SIZE );
	SPITransmit( rrSize - 1 );	// transmit one less than desired value
}
    1036:	08 95       	ret

00001038 <getSendBuffFreeSpace>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    1038:	80 91 ce 01 	lds	r24, 0x01CE
    103c:	88 23       	and	r24, r24
    103e:	19 f0       	breq	.+6      	; 0x1046 <getSendBuffFreeSpace+0xe>
		waitForTransmission();			//  hanging the wait loop
    1040:	0d b4       	in	r0, 0x2d	; 45
    1042:	07 fe       	sbrs	r0, 7
    1044:	fd cf       	rjmp	.-6      	; 0x1040 <getSendBuffFreeSpace+0x8>
	SPDR = data;						// start transmission of data
    1046:	8e ed       	ldi	r24, 0xDE	; 222
    1048:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    104a:	0d b4       	in	r0, 0x2d	; 45
    104c:	07 fe       	sbrs	r0, 7
    104e:	fd cf       	rjmp	.-6      	; 0x104a <getSendBuffFreeSpace+0x12>
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	6f 93       	push	r22
    1056:	64 e0       	ldi	r22, 0x04	; 4
    1058:	6a 95       	dec	r22
    105a:	f1 f7       	brne	.-4      	; 0x1058 <getSendBuffFreeSpace+0x20>
    105c:	6f 91       	pop	r22
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	c9 f7       	brne	.-14     	; 0x1054 <getSendBuffFreeSpace+0x1c>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    1062:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    1064:	0d b4       	in	r0, 0x2d	; 45
    1066:	07 fe       	sbrs	r0, 7
    1068:	fd cf       	rjmp	.-6      	; 0x1064 <getSendBuffFreeSpace+0x2c>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    106a:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    106e:	8e b5       	in	r24, 0x2e	; 46
// Get number of unoccupied bytes in the UART send buffer
unsigned char getSendBuffFreeSpace()
{
	SPITransmit( CMD_GET_SEND_BUFF_FREE_SPACE );
	return SPIReceive( 0 );			// junk data byte
}
    1070:	08 95       	ret

00001072 <getReadBuffNumBytes>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    1072:	80 91 ce 01 	lds	r24, 0x01CE
    1076:	88 23       	and	r24, r24
    1078:	19 f0       	breq	.+6      	; 0x1080 <getReadBuffNumBytes+0xe>
		waitForTransmission();			//  hanging the wait loop
    107a:	0d b4       	in	r0, 0x2d	; 45
    107c:	07 fe       	sbrs	r0, 7
    107e:	fd cf       	rjmp	.-6      	; 0x107a <getReadBuffNumBytes+0x8>
	SPDR = data;						// start transmission of data
    1080:	8f ed       	ldi	r24, 0xDF	; 223
    1082:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    1084:	0d b4       	in	r0, 0x2d	; 45
    1086:	07 fe       	sbrs	r0, 7
    1088:	fd cf       	rjmp	.-6      	; 0x1084 <getReadBuffNumBytes+0x12>
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	6f 93       	push	r22
    1090:	64 e0       	ldi	r22, 0x04	; 4
    1092:	6a 95       	dec	r22
    1094:	f1 f7       	brne	.-4      	; 0x1092 <getReadBuffNumBytes+0x20>
    1096:	6f 91       	pop	r22
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	c9 f7       	brne	.-14     	; 0x108e <getReadBuffNumBytes+0x1c>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    109c:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    109e:	0d b4       	in	r0, 0x2d	; 45
    10a0:	07 fe       	sbrs	r0, 7
    10a2:	fd cf       	rjmp	.-6      	; 0x109e <getReadBuffNumBytes+0x2c>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    10a4:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    10a8:	8e b5       	in	r24, 0x2e	; 46
// Get number of occupied bytes in the UART read buffer
unsigned char getReadBuffNumBytes()
{
	SPITransmit( CMD_GET_READ_BUFF_NUM_BYTES );
	return SPIReceive( 0 );			// junk data byte
}
    10aa:	08 95       	ret

000010ac <getSerialError>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    10ac:	80 91 ce 01 	lds	r24, 0x01CE
    10b0:	88 23       	and	r24, r24
    10b2:	19 f0       	breq	.+6      	; 0x10ba <getSerialError+0xe>
		waitForTransmission();			//  hanging the wait loop
    10b4:	0d b4       	in	r0, 0x2d	; 45
    10b6:	07 fe       	sbrs	r0, 7
    10b8:	fd cf       	rjmp	.-6      	; 0x10b4 <getSerialError+0x8>
	SPDR = data;						// start transmission of data
    10ba:	8c ef       	ldi	r24, 0xFC	; 252
    10bc:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    10be:	0d b4       	in	r0, 0x2d	; 45
    10c0:	07 fe       	sbrs	r0, 7
    10c2:	fd cf       	rjmp	.-6      	; 0x10be <getSerialError+0x12>
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	6f 93       	push	r22
    10ca:	64 e0       	ldi	r22, 0x04	; 4
    10cc:	6a 95       	dec	r22
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <getSerialError+0x20>
    10d0:	6f 91       	pop	r22
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <getSerialError+0x1c>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    10d6:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    10d8:	0d b4       	in	r0, 0x2d	; 45
    10da:	07 fe       	sbrs	r0, 7
    10dc:	fd cf       	rjmp	.-6      	; 0x10d8 <getSerialError+0x2c>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    10de:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    10e2:	8e b5       	in	r24, 0x2e	; 46
// Returns the UART error byte.  Error byte bits are enumerated in SPI.h
unsigned char getSerialError()
{
	SPITransmit( CMD_GET_UART_ERROR );
	return SPIReceive( 0 );
}
    10e4:	08 95       	ret

000010e6 <getEEPROMBusy>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    10e6:	80 91 ce 01 	lds	r24, 0x01CE
    10ea:	88 23       	and	r24, r24
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <getEEPROMBusy+0xe>
		waitForTransmission();			//  hanging the wait loop
    10ee:	0d b4       	in	r0, 0x2d	; 45
    10f0:	07 fe       	sbrs	r0, 7
    10f2:	fd cf       	rjmp	.-6      	; 0x10ee <getEEPROMBusy+0x8>
	SPDR = data;						// start transmission of data
    10f4:	8e ef       	ldi	r24, 0xFE	; 254
    10f6:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    10f8:	0d b4       	in	r0, 0x2d	; 45
    10fa:	07 fe       	sbrs	r0, 7
    10fc:	fd cf       	rjmp	.-6      	; 0x10f8 <getEEPROMBusy+0x12>
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	6f 93       	push	r22
    1104:	64 e0       	ldi	r22, 0x04	; 4
    1106:	6a 95       	dec	r22
    1108:	f1 f7       	brne	.-4      	; 0x1106 <__stack+0x7>
    110a:	6f 91       	pop	r22
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	c9 f7       	brne	.-14     	; 0x1102 <__stack+0x3>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    1110:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    1112:	0d b4       	in	r0, 0x2d	; 45
    1114:	07 fe       	sbrs	r0, 7
    1116:	fd cf       	rjmp	.-6      	; 0x1112 <__stack+0x13>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    1118:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    111c:	8e b5       	in	r24, 0x2e	; 46
//  means it is not possible to read from it or start a new write.
unsigned char getEEPROMBusy()
{
	SPITransmit( CMD_GET_EEPROM_BUSY );
	return SPIReceive( 0 );		// send a junk data byte here
}
    111e:	08 95       	ret

00001120 <readEEPROM>:

// Read a byte from the mega168's EEPROM.  This command can be used to check
//  the values of the settings that are loaded when the 168 is reset.
//  Settings occupy EEPROM bytes 0 - 23.
unsigned char readEEPROM( unsigned int address )
{
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
	if ( address >= 512 )		// address out of bounds
    112a:	22 e0       	ldi	r18, 0x02	; 2
    112c:	80 30       	cpi	r24, 0x00	; 0
    112e:	92 07       	cpc	r25, r18
    1130:	58 f0       	brcs	.+22     	; 0x1148 <readEEPROM+0x28>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	3d c0       	rjmp	.+122    	; 0x11b0 <readEEPROM+0x90>
    1136:	c8 01       	movw	r24, r16
    1138:	6f 93       	push	r22
    113a:	64 e0       	ldi	r22, 0x04	; 4
    113c:	6a 95       	dec	r22
    113e:	f1 f7       	brne	.-4      	; 0x113c <readEEPROM+0x1c>
    1140:	6f 91       	pop	r22
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	c9 f7       	brne	.-14     	; 0x1138 <readEEPROM+0x18>
    1146:	02 c0       	rjmp	.+4      	; 0x114c <readEEPROM+0x2c>
    1148:	04 e1       	ldi	r16, 0x14	; 20
    114a:	10 e0       	ldi	r17, 0x00	; 0
		return 0;

	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
    114c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <getEEPROMBusy>
    1150:	88 23       	and	r24, r24
    1152:	89 f7       	brne	.-30     	; 0x1136 <readEEPROM+0x16>


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    1154:	80 91 ce 01 	lds	r24, 0x01CE
    1158:	88 23       	and	r24, r24
    115a:	19 f0       	breq	.+6      	; 0x1162 <readEEPROM+0x42>
		waitForTransmission();			//  hanging the wait loop
    115c:	0d b4       	in	r0, 0x2d	; 45
    115e:	07 fe       	sbrs	r0, 7
    1160:	fd cf       	rjmp	.-6      	; 0x115c <readEEPROM+0x3c>
		return 0;

	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
	
	// insert address bits 7 and 8 into the command byte
	SPITransmit( CMD_READ_EEPROM | (( address & 0x0080 ) >> 6 )
    1162:	ce 01       	movw	r24, r28
    1164:	80 78       	andi	r24, 0x80	; 128
    1166:	90 70       	andi	r25, 0x00	; 0
    1168:	16 e0       	ldi	r17, 0x06	; 6
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	1a 95       	dec	r17
    1170:	e1 f7       	brne	.-8      	; 0x116a <readEEPROM+0x4a>
    1172:	9e 01       	movw	r18, r28
    1174:	20 70       	andi	r18, 0x00	; 0
    1176:	31 70       	andi	r19, 0x01	; 1
    1178:	83 2b       	or	r24, r19
    117a:	88 6f       	ori	r24, 0xF8	; 248
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    117c:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    117e:	0d b4       	in	r0, 0x2d	; 45
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <readEEPROM+0x5e>
	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
	
	// insert address bits 7 and 8 into the command byte
	SPITransmit( CMD_READ_EEPROM | (( address & 0x0080 ) >> 6 )
								 | (( address & 0x0100 ) >> 8 ));
	SPITransmit( (unsigned char) ( address & 0x007F ));
    1184:	9e 01       	movw	r18, r28
    1186:	2f 77       	andi	r18, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    1188:	2e bd       	out	0x2e, r18	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    118a:	0d b4       	in	r0, 0x2d	; 45
    118c:	07 fe       	sbrs	r0, 7
    118e:	fd cf       	rjmp	.-6      	; 0x118a <readEEPROM+0x6a>
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	6f 93       	push	r22
    1196:	64 e0       	ldi	r22, 0x04	; 4
    1198:	6a 95       	dec	r22
    119a:	f1 f7       	brne	.-4      	; 0x1198 <readEEPROM+0x78>
    119c:	6f 91       	pop	r22
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <readEEPROM+0x74>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    11a2:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    11a4:	0d b4       	in	r0, 0x2d	; 45
    11a6:	07 fe       	sbrs	r0, 7
    11a8:	fd cf       	rjmp	.-6      	; 0x11a4 <readEEPROM+0x84>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    11aa:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    11ae:	8e b5       	in	r24, 0x2e	; 46
	// insert address bits 7 and 8 into the command byte
	SPITransmit( CMD_READ_EEPROM | (( address & 0x0080 ) >> 6 )
								 | (( address & 0x0100 ) >> 8 ));
	SPITransmit( (unsigned char) ( address & 0x007F ));
	return SPIReceive( 0 );		// send a junk data byte here
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	08 95       	ret

000011ba <writeEEPROM>:
//  can be used to store settings so that they persist after a hardware reset.
//  Settings occupy EEPROM bytes 0 - 23 and melody pointers occupy bytes
//  24 - 32.  Melody notes are saved to EEPROM in three-byte blocks starting
//  at address 33.
void writeEEPROM( unsigned int address, unsigned char data )
{
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	16 2f       	mov	r17, r22
	if ( address >= 512 )		// address out of bounds
    11c8:	22 e0       	ldi	r18, 0x02	; 2
    11ca:	80 30       	cpi	r24, 0x00	; 0
    11cc:	92 07       	cpc	r25, r18
    11ce:	50 f0       	brcs	.+20     	; 0x11e4 <writeEEPROM+0x2a>
    11d0:	3d c0       	rjmp	.+122    	; 0x124c <writeEEPROM+0x92>
    11d2:	c7 01       	movw	r24, r14
    11d4:	6f 93       	push	r22
    11d6:	64 e0       	ldi	r22, 0x04	; 4
    11d8:	6a 95       	dec	r22
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <writeEEPROM+0x1e>
    11dc:	6f 91       	pop	r22
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	c9 f7       	brne	.-14     	; 0x11d4 <writeEEPROM+0x1a>
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <writeEEPROM+0x30>
    11e4:	34 e1       	ldi	r19, 0x14	; 20
    11e6:	e3 2e       	mov	r14, r19
    11e8:	f1 2c       	mov	r15, r1
		return;

	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
    11ea:	0e 94 73 08 	call	0x10e6	; 0x10e6 <getEEPROMBusy>
    11ee:	88 23       	and	r24, r24
    11f0:	81 f7       	brne	.-32     	; 0x11d2 <writeEEPROM+0x18>


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    11f2:	80 91 ce 01 	lds	r24, 0x01CE
    11f6:	88 23       	and	r24, r24
    11f8:	19 f0       	breq	.+6      	; 0x1200 <writeEEPROM+0x46>
		waitForTransmission();			//  hanging the wait loop
    11fa:	0d b4       	in	r0, 0x2d	; 45
    11fc:	07 fe       	sbrs	r0, 7
    11fe:	fd cf       	rjmp	.-6      	; 0x11fa <writeEEPROM+0x40>
		return;

	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish

	// insert data MSB and address bits 7 and 8 into the command byte
	SPITransmit( CMD_WRITE_EEPROM | (( data & 0x80 ) >> 5 )
    1200:	ce 01       	movw	r24, r28
    1202:	80 78       	andi	r24, 0x80	; 128
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	26 e0       	ldi	r18, 0x06	; 6
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	2a 95       	dec	r18
    120e:	e1 f7       	brne	.-8      	; 0x1208 <writeEEPROM+0x4e>
    1210:	9e 01       	movw	r18, r28
    1212:	20 70       	andi	r18, 0x00	; 0
    1214:	31 70       	andi	r19, 0x01	; 1
    1216:	83 2b       	or	r24, r19
    1218:	80 6f       	ori	r24, 0xF0	; 240
    121a:	21 2f       	mov	r18, r17
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	20 78       	andi	r18, 0x80	; 128
    1220:	30 70       	andi	r19, 0x00	; 0
    1222:	95 e0       	ldi	r25, 0x05	; 5
    1224:	35 95       	asr	r19
    1226:	27 95       	ror	r18
    1228:	9a 95       	dec	r25
    122a:	e1 f7       	brne	.-8      	; 0x1224 <writeEEPROM+0x6a>
    122c:	82 2b       	or	r24, r18
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    122e:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    1230:	0d b4       	in	r0, 0x2d	; 45
    1232:	07 fe       	sbrs	r0, 7
    1234:	fd cf       	rjmp	.-6      	; 0x1230 <writeEEPROM+0x76>

	// insert data MSB and address bits 7 and 8 into the command byte
	SPITransmit( CMD_WRITE_EEPROM | (( data & 0x80 ) >> 5 )
								  | (( address & 0x0080 ) >> 6 )
								  | (( address & 0x0100 ) >> 8 ));
	SPITransmit( (unsigned char) ( address & 0x007F ));
    1236:	9e 01       	movw	r18, r28
    1238:	2f 77       	andi	r18, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    123a:	2e bd       	out	0x2e, r18	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    123c:	0d b4       	in	r0, 0x2d	; 45
    123e:	07 fe       	sbrs	r0, 7
    1240:	fd cf       	rjmp	.-6      	; 0x123c <writeEEPROM+0x82>
	// insert data MSB and address bits 7 and 8 into the command byte
	SPITransmit( CMD_WRITE_EEPROM | (( data & 0x80 ) >> 5 )
								  | (( address & 0x0080 ) >> 6 )
								  | (( address & 0x0100 ) >> 8 ));
	SPITransmit( (unsigned char) ( address & 0x007F ));
	SPITransmit( data & 0x7F );
    1242:	1f 77       	andi	r17, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    1244:	1e bd       	out	0x2e, r17	; 46
	SPITransmitting = 1;				// flag transmission is in progress
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 ce 01 	sts	0x01CE, r24
	SPITransmit( CMD_WRITE_EEPROM | (( data & 0x80 ) >> 5 )
								  | (( address & 0x0080 ) >> 6 )
								  | (( address & 0x0100 ) >> 8 ));
	SPITransmit( (unsigned char) ( address & 0x007F ));
	SPITransmit( data & 0x7F );
}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	08 95       	ret

00001258 <setAndSaveSerial>:
//  Arguments to this function should be the UART #defines in SPI.h.  
//  speedMode is either UART_NORMAL_SPEED or UART_DOUBLE_SPEED.
//  This command will disable permanent progmode if it's enabled.
void setAndSaveSerial( unsigned char parity, unsigned char stopBits,
					   unsigned char speedMode, unsigned int UBRR )
{
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	18 2f       	mov	r17, r24
    1268:	d6 2e       	mov	r13, r22
    126a:	04 2f       	mov	r16, r20
	// ensure parameter values are all valid
	if (( parity != UART_EVEN_PARITY ) && ( parity != UART_ODD_PARITY ))
    126c:	82 50       	subi	r24, 0x02	; 2
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	08 f0       	brcs	.+2      	; 0x1274 <setAndSaveSerial+0x1c>
    1272:	10 e0       	ldi	r17, 0x00	; 0
    1274:	e9 01       	movw	r28, r18
    1276:	28 e0       	ldi	r18, 0x08	; 8
    1278:	c0 30       	cpi	r28, 0x00	; 0
    127a:	d2 07       	cpc	r29, r18
    127c:	60 f0       	brcs	.+24     	; 0x1296 <setAndSaveSerial+0x3e>
    127e:	cf ef       	ldi	r28, 0xFF	; 255
    1280:	d7 e0       	ldi	r29, 0x07	; 7
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <setAndSaveSerial+0x3e>
    1284:	c7 01       	movw	r24, r14
    1286:	6f 93       	push	r22
    1288:	64 e0       	ldi	r22, 0x04	; 4
    128a:	6a 95       	dec	r22
    128c:	f1 f7       	brne	.-4      	; 0x128a <setAndSaveSerial+0x32>
    128e:	6f 91       	pop	r22
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	c9 f7       	brne	.-14     	; 0x1286 <setAndSaveSerial+0x2e>
    1294:	03 c0       	rjmp	.+6      	; 0x129c <setAndSaveSerial+0x44>
    1296:	e4 e1       	ldi	r30, 0x14	; 20
    1298:	ee 2e       	mov	r14, r30
    129a:	f1 2c       	mov	r15, r1
	if ( speedMode != UART_NORMAL_SPEED )
		speedMode = UART_DOUBLE_SPEED;
	if ( UBRR > 2047 )					// UBRR must be an 11-bit value
		UBRR = 2047;

	waitWhileEEPROMBusy();		// ensure mega168's EEPROM is ready for writing
    129c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <getEEPROMBusy>
    12a0:	88 23       	and	r24, r24
    12a2:	81 f7       	brne	.-32     	; 0x1284 <setAndSaveSerial+0x2c>


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    12a4:	80 91 ce 01 	lds	r24, 0x01CE
    12a8:	88 23       	and	r24, r24
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <setAndSaveSerial+0x5a>
		waitForTransmission();			//  hanging the wait loop
    12ac:	0d b4       	in	r0, 0x2d	; 45
    12ae:	07 fe       	sbrs	r0, 7
    12b0:	fd cf       	rjmp	.-6      	; 0x12ac <setAndSaveSerial+0x54>
		speedMode = UART_DOUBLE_SPEED;
	if ( UBRR > 2047 )					// UBRR must be an 11-bit value
		UBRR = 2047;

	waitWhileEEPROMBusy();		// ensure mega168's EEPROM is ready for writing
	SPITransmit( CMD_SET_AND_SAVE_SERIAL | ( parity << 1 ));
    12b2:	11 0f       	add	r17, r17
    12b4:	19 6c       	ori	r17, 0xC9	; 201
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    12b6:	1e bd       	out	0x2e, r17	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    12b8:	0d b4       	in	r0, 0x2d	; 45
    12ba:	07 fe       	sbrs	r0, 7
    12bc:	fd cf       	rjmp	.-6      	; 0x12b8 <setAndSaveSerial+0x60>
	if ( UBRR > 2047 )					// UBRR must be an 11-bit value
		UBRR = 2047;

	waitWhileEEPROMBusy();		// ensure mega168's EEPROM is ready for writing
	SPITransmit( CMD_SET_AND_SAVE_SERIAL | ( parity << 1 ));
	SPITransmit( ( stopBits << 5 ) | ( speedMode << 4 ) |
    12be:	ae 01       	movw	r20, r28
    12c0:	40 78       	andi	r20, 0x80	; 128
    12c2:	57 70       	andi	r21, 0x07	; 7
    12c4:	44 0f       	add	r20, r20
    12c6:	45 2f       	mov	r20, r21
    12c8:	44 1f       	adc	r20, r20
    12ca:	55 0b       	sbc	r21, r21
    12cc:	51 95       	neg	r21
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	00 23       	and	r16, r16
    12d4:	11 f0       	breq	.+4      	; 0x12da <setAndSaveSerial+0x82>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	64 e0       	ldi	r22, 0x04	; 4
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	6a 95       	dec	r22
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <setAndSaveSerial+0x84>
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	dd 20       	and	r13, r13
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <setAndSaveSerial+0x98>
    12ec:	21 e0       	ldi	r18, 0x01	; 1
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	55 e0       	ldi	r21, 0x05	; 5
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	5a 95       	dec	r21
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <setAndSaveSerial+0x9a>
    12fa:	82 2b       	or	r24, r18
    12fc:	84 2b       	or	r24, r20
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    12fe:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    1300:	0d b4       	in	r0, 0x2d	; 45
    1302:	07 fe       	sbrs	r0, 7
    1304:	fd cf       	rjmp	.-6      	; 0x1300 <setAndSaveSerial+0xa8>

	waitWhileEEPROMBusy();		// ensure mega168's EEPROM is ready for writing
	SPITransmit( CMD_SET_AND_SAVE_SERIAL | ( parity << 1 ));
	SPITransmit( ( stopBits << 5 ) | ( speedMode << 4 ) |
				(( UBRR & 0x0780 ) >> 7 ));	// send the four MSBs of UBRR
	SPITransmit( UBRR & 0x007F );			// send the seven LSBs of UBBR
    1306:	9e 01       	movw	r18, r28
    1308:	2f 77       	andi	r18, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    130a:	2e bd       	out	0x2e, r18	; 46
	SPITransmitting = 1;				// flag transmission is in progress
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 ce 01 	sts	0x01CE, r24
    1312:	82 e3       	ldi	r24, 0x32	; 50
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	6f 93       	push	r22
    1318:	64 e0       	ldi	r22, 0x04	; 4
    131a:	6a 95       	dec	r22
    131c:	f1 f7       	brne	.-4      	; 0x131a <setAndSaveSerial+0xc2>
    131e:	6f 91       	pop	r22
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	c9 f7       	brne	.-14     	; 0x1316 <setAndSaveSerial+0xbe>
	SPITransmit( ( stopBits << 5 ) | ( speedMode << 4 ) |
				(( UBRR & 0x0780 ) >> 7 ));	// send the four MSBs of UBRR
	SPITransmit( UBRR & 0x007F );			// send the seven LSBs of UBBR

	delay_us(50);		// give the mega168 time to set parameters
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	08 95       	ret

00001334 <eraseMelodies>:


// Erase all the stored melodies by effectively resetting the melody-start
//  pointers to NULL.
void eraseMelodies()
{
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	c4 e1       	ldi	r28, 0x14	; 20
    133a:	d0 e0       	ldi	r29, 0x00	; 0
    133c:	08 c0       	rjmp	.+16     	; 0x134e <eraseMelodies+0x1a>
    133e:	ce 01       	movw	r24, r28
    1340:	6f 93       	push	r22
    1342:	64 e0       	ldi	r22, 0x04	; 4
    1344:	6a 95       	dec	r22
    1346:	f1 f7       	brne	.-4      	; 0x1344 <eraseMelodies+0x10>
    1348:	6f 91       	pop	r22
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	c9 f7       	brne	.-14     	; 0x1340 <eraseMelodies+0xc>
	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
    134e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <getEEPROMBusy>
    1352:	88 23       	and	r24, r24
    1354:	a1 f7       	brne	.-24     	; 0x133e <eraseMelodies+0xa>


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    1356:	80 91 ce 01 	lds	r24, 0x01CE
    135a:	88 23       	and	r24, r24
    135c:	19 f0       	breq	.+6      	; 0x1364 <eraseMelodies+0x30>
		waitForTransmission();			//  hanging the wait loop
    135e:	0d b4       	in	r0, 0x2d	; 45
    1360:	07 fe       	sbrs	r0, 7
    1362:	fd cf       	rjmp	.-6      	; 0x135e <eraseMelodies+0x2a>
	SPDR = data;						// start transmission of data
    1364:	8a eb       	ldi	r24, 0xBA	; 186
    1366:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	80 93 ce 01 	sts	0x01CE, r24
//  pointers to NULL.
void eraseMelodies()
{
	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
	SPITransmit( CMD_ERASE_MELODIES );
}
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <endMelody>:
// Terminate the melody currently under construction by pointing the start
//  of the next melody to the next EEPROM note block.  Any subsequent
//  storeNote() calls will build upon this next melody.  After a hardware
//  reset the current melody under construction is melody 0.
void endMelody()
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	c4 e1       	ldi	r28, 0x14	; 20
    137a:	d0 e0       	ldi	r29, 0x00	; 0
    137c:	08 c0       	rjmp	.+16     	; 0x138e <endMelody+0x1a>
    137e:	ce 01       	movw	r24, r28
    1380:	6f 93       	push	r22
    1382:	64 e0       	ldi	r22, 0x04	; 4
    1384:	6a 95       	dec	r22
    1386:	f1 f7       	brne	.-4      	; 0x1384 <endMelody+0x10>
    1388:	6f 91       	pop	r22
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	c9 f7       	brne	.-14     	; 0x1380 <endMelody+0xc>
	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
    138e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <getEEPROMBusy>
    1392:	88 23       	and	r24, r24
    1394:	a1 f7       	brne	.-24     	; 0x137e <endMelody+0xa>


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    1396:	80 91 ce 01 	lds	r24, 0x01CE
    139a:	88 23       	and	r24, r24
    139c:	19 f0       	breq	.+6      	; 0x13a4 <endMelody+0x30>
		waitForTransmission();			//  hanging the wait loop
    139e:	0d b4       	in	r0, 0x2d	; 45
    13a0:	07 fe       	sbrs	r0, 7
    13a2:	fd cf       	rjmp	.-6      	; 0x139e <endMelody+0x2a>
	SPDR = data;						// start transmission of data
    13a4:	80 ee       	ldi	r24, 0xE0	; 224
    13a6:	8e bd       	out	0x2e, r24	; 46
	SPITransmitting = 1;				// flag transmission is in progress
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 ce 01 	sts	0x01CE, r24
//  reset the current melody under construction is melody 0.
void endMelody()
{
	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
	SPITransmit( CMD_END_MELODY );
}
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <storeNote>:

// Add this note to the melody currently under construction. There is room
//  in the mega168's EEPROM for 159 total notes.
//  Note enumeration is provided as a set of #define macros in SPI.h.
void storeNote( unsigned char note, unsigned int duration )
{
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <storeNote+0x10>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	08 2f       	mov	r16, r24
    13ca:	7a 83       	std	Y+2, r23	; 0x02
    13cc:	69 83       	std	Y+1, r22	; 0x01
	unsigned char *byte_ptr = (unsigned char*)&duration;
	unsigned char lo = *byte_ptr;		// low byte of duration
    13ce:	f6 2e       	mov	r15, r22
	unsigned char hi = *(byte_ptr + 1);	// high byte of duration
    13d0:	1a 81       	ldd	r17, Y+2	; 0x02
    13d2:	b4 e1       	ldi	r27, 0x14	; 20
    13d4:	cb 2e       	mov	r12, r27
    13d6:	d1 2c       	mov	r13, r1
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <storeNote+0x36>
    13da:	c6 01       	movw	r24, r12
    13dc:	6f 93       	push	r22
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	6a 95       	dec	r22
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <storeNote+0x2c>
    13e4:	6f 91       	pop	r22
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	c9 f7       	brne	.-14     	; 0x13dc <storeNote+0x28>

	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
    13ea:	0e 94 73 08 	call	0x10e6	; 0x10e6 <getEEPROMBusy>
    13ee:	88 23       	and	r24, r24
    13f0:	a1 f7       	brne	.-24     	; 0x13da <storeNote+0x26>


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    13f2:	80 91 ce 01 	lds	r24, 0x01CE
    13f6:	88 23       	and	r24, r24
    13f8:	19 f0       	breq	.+6      	; 0x1400 <storeNote+0x4c>
		waitForTransmission();			//  hanging the wait loop
    13fa:	0d b4       	in	r0, 0x2d	; 45
    13fc:	07 fe       	sbrs	r0, 7
    13fe:	fd cf       	rjmp	.-6      	; 0x13fa <storeNote+0x46>
	unsigned char hi = *(byte_ptr + 1);	// high byte of duration

	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
		
	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_STORE_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
    1400:	80 2f       	mov	r24, r16
    1402:	88 1f       	adc	r24, r24
    1404:	88 27       	eor	r24, r24
    1406:	88 1f       	adc	r24, r24
    1408:	88 6a       	ori	r24, 0xA8	; 168
    140a:	2f 2d       	mov	r18, r15
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	20 78       	andi	r18, 0x80	; 128
    1410:	30 70       	andi	r19, 0x00	; 0
    1412:	a5 e0       	ldi	r26, 0x05	; 5
    1414:	35 95       	asr	r19
    1416:	27 95       	ror	r18
    1418:	aa 95       	dec	r26
    141a:	e1 f7       	brne	.-8      	; 0x1414 <storeNote+0x60>
    141c:	82 2b       	or	r24, r18
    141e:	21 2f       	mov	r18, r17
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	20 78       	andi	r18, 0x80	; 128
    1424:	30 70       	andi	r19, 0x00	; 0
    1426:	f6 e0       	ldi	r31, 0x06	; 6
    1428:	35 95       	asr	r19
    142a:	27 95       	ror	r18
    142c:	fa 95       	dec	r31
    142e:	e1 f7       	brne	.-8      	; 0x1428 <storeNote+0x74>
    1430:	82 2b       	or	r24, r18
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    1432:	8e bd       	out	0x2e, r24	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    1434:	0d b4       	in	r0, 0x2d	; 45
    1436:	07 fe       	sbrs	r0, 7
    1438:	fd cf       	rjmp	.-6      	; 0x1434 <storeNote+0x80>
	waitWhileEEPROMBusy();		// wait for any current EEPROM writes to finish
		
	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_STORE_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
								| (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
    143a:	0f 77       	andi	r16, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    143c:	0e bd       	out	0x2e, r16	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    143e:	0d b4       	in	r0, 0x2d	; 45
    1440:	07 fe       	sbrs	r0, 7
    1442:	fd cf       	rjmp	.-6      	; 0x143e <storeNote+0x8a>
		
	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_STORE_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
								| (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
	SPITransmit(   hi & 0x7F );
    1444:	1f 77       	andi	r17, 0x7F	; 127
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    1446:	1e bd       	out	0x2e, r17	; 46

// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
    1448:	0d b4       	in	r0, 0x2d	; 45
    144a:	07 fe       	sbrs	r0, 7
    144c:	fd cf       	rjmp	.-6      	; 0x1448 <storeNote+0x94>
	// insert the MSBs of the three data bytes into the command byte
	SPITransmit( CMD_STORE_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
								| (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
	SPITransmit(   hi & 0x7F );
	SPITransmit(   lo & 0x7F );
    144e:	8f e7       	ldi	r24, 0x7F	; 127
    1450:	f8 22       	and	r15, r24
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    1452:	fe bc       	out	0x2e, r15	; 46
	SPITransmitting = 1;				// flag transmission is in progress
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	80 93 ce 01 	sts	0x01CE, r24
	SPITransmit( CMD_STORE_NOTE | (( lo & 0x80 ) >> 5 ) | (( hi & 0x80 ) >> 6 )
								| (( note & 0x80 ) >> 7 ));
	SPITransmit( note & 0x7F );
	SPITransmit(   hi & 0x7F );
	SPITransmit(   lo & 0x7F );
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	08 95       	ret

0000146e <playMelody>:

// Play the specified melody, which is a sequence of notes stored in the
//  mega168's EEPROM.  You can have up to 8 stored melodies (melody ranges
//  from 0 - 7).  If the melody doesn't exist nothing will happen.
void playMelody( unsigned char melody )
{
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	18 2f       	mov	r17, r24
	if ( melody < 8 )
    1476:	88 30       	cpi	r24, 0x08	; 8
    1478:	50 f0       	brcs	.+20     	; 0x148e <playMelody+0x20>
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <playMelody+0x44>
    147c:	ce 01       	movw	r24, r28
    147e:	6f 93       	push	r22
    1480:	64 e0       	ldi	r22, 0x04	; 4
    1482:	6a 95       	dec	r22
    1484:	f1 f7       	brne	.-4      	; 0x1482 <playMelody+0x14>
    1486:	6f 91       	pop	r22
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	c9 f7       	brne	.-14     	; 0x147e <playMelody+0x10>
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <playMelody+0x24>
    148e:	c4 e1       	ldi	r28, 0x14	; 20
    1490:	d0 e0       	ldi	r29, 0x00	; 0
	{
		waitWhileEEPROMBusy();	// wait for any current EEPROM writes to finish
    1492:	0e 94 73 08 	call	0x10e6	; 0x10e6 <getEEPROMBusy>
    1496:	88 23       	and	r24, r24
    1498:	89 f7       	brne	.-30     	; 0x147c <playMelody+0xe>


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    149a:	80 91 ce 01 	lds	r24, 0x01CE
    149e:	88 23       	and	r24, r24
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <playMelody+0x3a>
		waitForTransmission();			//  hanging the wait loop
    14a2:	0d b4       	in	r0, 0x2d	; 45
    14a4:	07 fe       	sbrs	r0, 7
    14a6:	fd cf       	rjmp	.-6      	; 0x14a2 <playMelody+0x34>
void playMelody( unsigned char melody )
{
	if ( melody < 8 )
	{
		waitWhileEEPROMBusy();	// wait for any current EEPROM writes to finish
		SPITransmit( CMD_PLAY_MELODY | melody );
    14a8:	10 6b       	ori	r17, 0xB0	; 176
// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
		waitForTransmission();			//  hanging the wait loop
	SPDR = data;						// start transmission of data
    14aa:	1e bd       	out	0x2e, r17	; 46
	SPITransmitting = 1;				// flag transmission is in progress
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	80 93 ce 01 	sts	0x01CE, r24
	if ( melody < 8 )
	{
		waitWhileEEPROMBusy();	// wait for any current EEPROM writes to finish
		SPITransmit( CMD_PLAY_MELODY | melody );
	}
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	08 95       	ret

000014ba <getStatus>:


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    14ba:	80 91 ce 01 	lds	r24, 0x01CE
    14be:	88 23       	and	r24, r24
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <getStatus+0xe>
		waitForTransmission();			//  hanging the wait loop
    14c2:	0d b4       	in	r0, 0x2d	; 45
    14c4:	07 fe       	sbrs	r0, 7
    14c6:	fd cf       	rjmp	.-6      	; 0x14c2 <getStatus+0x8>
	SPDR = data;						// start transmission of data
    14c8:	8a ed       	ldi	r24, 0xDA	; 218
    14ca:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    14cc:	0d b4       	in	r0, 0x2d	; 45
    14ce:	07 fe       	sbrs	r0, 7
    14d0:	fd cf       	rjmp	.-6      	; 0x14cc <getStatus+0x12>
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	6f 93       	push	r22
    14d8:	64 e0       	ldi	r22, 0x04	; 4
    14da:	6a 95       	dec	r22
    14dc:	f1 f7       	brne	.-4      	; 0x14da <getStatus+0x20>
    14de:	6f 91       	pop	r22
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	c9 f7       	brne	.-14     	; 0x14d6 <getStatus+0x1c>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    14e4:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    14e6:	0d b4       	in	r0, 0x2d	; 45
    14e8:	07 fe       	sbrs	r0, 7
    14ea:	fd cf       	rjmp	.-6      	; 0x14e6 <getStatus+0x2c>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    14ec:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    14f0:	8e b5       	in	r24, 0x2e	; 46
//  status bits.
unsigned char getStatus()
{
	SPITransmit( CMD_GET_STATUS );
	return SPIReceive( 0 );		// junk data byte
}
    14f2:	08 95       	ret

000014f4 <getFirmwareVersion>:


// Get the version of the firmware running on the mega168.  The arguments
//  to this function will hold the return values once the function is through.
void getFirmwareVersion( unsigned char *vMajor, unsigned char *vMinor )
{
    14f4:	fc 01       	movw	r30, r24
    14f6:	db 01       	movw	r26, r22


// Transmit a byte to the mega168
void SPITransmit( unsigned char data )
{
	if ( SPITransmitting )				// prevent false SPIF clears from
    14f8:	80 91 ce 01 	lds	r24, 0x01CE
    14fc:	88 23       	and	r24, r24
    14fe:	19 f0       	breq	.+6      	; 0x1506 <getFirmwareVersion+0x12>
		waitForTransmission();			//  hanging the wait loop
    1500:	0d b4       	in	r0, 0x2d	; 45
    1502:	07 fe       	sbrs	r0, 7
    1504:	fd cf       	rjmp	.-6      	; 0x1500 <getFirmwareVersion+0xc>
	SPDR = data;						// start transmission of data
    1506:	8d ef       	ldi	r24, 0xFD	; 253
    1508:	8e bd       	out	0x2e, r24	; 46

// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
		waitForTransmission();				// #define in SPI.h
    150a:	0d b4       	in	r0, 0x2d	; 45
    150c:	07 fe       	sbrs	r0, 7
    150e:	fd cf       	rjmp	.-6      	; 0x150a <getFirmwareVersion+0x16>
    1510:	83 e0       	ldi	r24, 0x03	; 3
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	6f 93       	push	r22
    1516:	64 e0       	ldi	r22, 0x04	; 4
    1518:	6a 95       	dec	r22
    151a:	f1 f7       	brne	.-4      	; 0x1518 <getFirmwareVersion+0x24>
    151c:	6f 91       	pop	r22
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	c9 f7       	brne	.-14     	; 0x1514 <getFirmwareVersion+0x20>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    1522:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    1524:	0d b4       	in	r0, 0x2d	; 45
    1526:	07 fe       	sbrs	r0, 7
    1528:	fd cf       	rjmp	.-6      	; 0x1524 <getFirmwareVersion+0x30>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    152a:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    152e:	8e b5       	in	r24, 0x2e	; 46
// Get the version of the firmware running on the mega168.  The arguments
//  to this function will hold the return values once the function is through.
void getFirmwareVersion( unsigned char *vMajor, unsigned char *vMinor )
{
	SPITransmit( CMD_GET_FIRMWARE_VERSION );
	*vMajor = SPIReceive( 0 );	// can send any data byte here (not NULL cmd)
    1530:	80 83       	st	Z, r24


// Initiate an exchange of data with the mega168 by transmitting a byte
unsigned char SPIReceive( unsigned char data )	// data is often a junk byte
{
	if ( SPITransmitting )
    1532:	80 91 ce 01 	lds	r24, 0x01CE
    1536:	88 23       	and	r24, r24
    1538:	19 f0       	breq	.+6      	; 0x1540 <getFirmwareVersion+0x4c>
		waitForTransmission();				// #define in SPI.h
    153a:	0d b4       	in	r0, 0x2d	; 45
    153c:	07 fe       	sbrs	r0, 7
    153e:	fd cf       	rjmp	.-6      	; 0x153a <getFirmwareVersion+0x46>
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	6f 93       	push	r22
    1546:	64 e0       	ldi	r22, 0x04	; 4
    1548:	6a 95       	dec	r22
    154a:	f1 f7       	brne	.-4      	; 0x1548 <getFirmwareVersion+0x54>
    154c:	6f 91       	pop	r22
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	c9 f7       	brne	.-14     	; 0x1544 <getFirmwareVersion+0x50>
    delay_us( 3 );							// give the mega168 time to prepare
											//  return data
    SPDR = data;							// start bidirectional transfer
    1552:	1e bc       	out	0x2e, r1	; 46
	waitForTransmission();					// #define in SPI.h
    1554:	0d b4       	in	r0, 0x2d	; 45
    1556:	07 fe       	sbrs	r0, 7
    1558:	fd cf       	rjmp	.-6      	; 0x1554 <getFirmwareVersion+0x60>

	// reading SPCR and SPDR will clear SPIF, so we will use this flag to
	//  indicate that this does not mean we are currently transmitting
	SPITransmitting = 0;
    155a:	10 92 ce 01 	sts	0x01CE, r1
	return SPDR;
    155e:	8e b5       	in	r24, 0x2e	; 46
//  to this function will hold the return values once the function is through.
void getFirmwareVersion( unsigned char *vMajor, unsigned char *vMinor )
{
	SPITransmit( CMD_GET_FIRMWARE_VERSION );
	*vMajor = SPIReceive( 0 );	// can send any data byte here (not NULL cmd)
	*vMinor = SPIReceive( 0 );	// junk data byte (this one can be NULL cmd)
    1560:	8c 93       	st	X, r24
}
    1562:	08 95       	ret

00001564 <restoreDefaultSettings>:
// After this function is called the mega168 must be manually reset for the
//  changes to take effect.  After the reset the settings will all be reset
//  to their default values.
void restoreDefaultSettings()
{
	writeEEPROM( ADDR_INIT_CHECK, 0xFF );
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	6f ef       	ldi	r22, 0xFF	; 255
    156a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    156e:	08 95       	ret

00001570 <saveM1PWMFrequency>:
{
	if ( resolution != RESOLUTION_7BIT )
		resolution = RESOLUTION_8BIT;
	if ( prescaler > PRESCALER_1024 )
		prescaler = PRESCALER_1024;
	writeEEPROM( ADDR_M1_PWM_FREQUENCY, ( resolution << 2 ) | prescaler );
    1570:	64 30       	cpi	r22, 0x04	; 4
    1572:	08 f0       	brcs	.+2      	; 0x1576 <saveM1PWMFrequency+0x6>
    1574:	63 e0       	ldi	r22, 0x03	; 3
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	88 23       	and	r24, r24
    157c:	11 f0       	breq	.+4      	; 0x1582 <saveM1PWMFrequency+0x12>
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	22 0f       	add	r18, r18
    1584:	33 1f       	adc	r19, r19
    1586:	22 0f       	add	r18, r18
    1588:	33 1f       	adc	r19, r19
    158a:	62 2b       	or	r22, r18
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1594:	08 95       	ret

00001596 <saveM2PWMFrequency>:
{
	if ( resolution != RESOLUTION_7BIT )
		resolution = RESOLUTION_8BIT;
	if ( prescaler > PRESCALER_1024 )
		prescaler = PRESCALER_1024;
	writeEEPROM( ADDR_M2_PWM_FREQUENCY, ( resolution << 2 ) | prescaler );
    1596:	64 30       	cpi	r22, 0x04	; 4
    1598:	08 f0       	brcs	.+2      	; 0x159c <saveM2PWMFrequency+0x6>
    159a:	63 e0       	ldi	r22, 0x03	; 3
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	88 23       	and	r24, r24
    15a2:	11 f0       	breq	.+4      	; 0x15a8 <saveM2PWMFrequency+0x12>
    15a4:	21 e0       	ldi	r18, 0x01	; 1
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	22 0f       	add	r18, r18
    15ae:	33 1f       	adc	r19, r19
    15b0:	62 2b       	or	r22, r18
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    15ba:	08 95       	ret

000015bc <saveM1CurrentSamples>:


// The number of current samples in the running motor current average.  The
//  saved value must be a power of two (and hence cannot be zero).
void saveM1CurrentSamples( unsigned char samples )
{
    15bc:	28 2f       	mov	r18, r24
	unsigned char i;
	unsigned char bitmask = 0x80;

	// ensure samples is a power of two
	if ( samples == 0 )
    15be:	88 23       	and	r24, r24
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <saveM1CurrentSamples+0x8>
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	60 e8       	ldi	r22, 0x80	; 128
		samples = 1;
	for ( i = 0; i < 8; i++ )
	{
		if ( samples & bitmask )
    15c8:	86 2f       	mov	r24, r22
    15ca:	82 23       	and	r24, r18
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <saveM1CurrentSamples+0x1a>
			break;
		bitmask >>= 1;
    15ce:	66 95       	lsr	r22
	unsigned char bitmask = 0x80;

	// ensure samples is a power of two
	if ( samples == 0 )
		samples = 1;
	for ( i = 0; i < 8; i++ )
    15d0:	9f 5f       	subi	r25, 0xFF	; 255
    15d2:	98 30       	cpi	r25, 0x08	; 8
    15d4:	c9 f7       	brne	.-14     	; 0x15c8 <saveM1CurrentSamples+0xc>
		if ( samples & bitmask )
			break;
		bitmask >>= 1;
	}
	samples &= bitmask;
	writeEEPROM( ADDR_M1_CURRENT_SAMPLES, samples );
    15d6:	62 23       	and	r22, r18
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    15e0:	08 95       	ret

000015e2 <saveM2CurrentSamples>:

void saveM2CurrentSamples( unsigned char samples )
{
    15e2:	28 2f       	mov	r18, r24
	unsigned char i;
	unsigned char bitmask = 0x80;

	// ensure samples is a power of two
	if ( samples == 0 )
    15e4:	88 23       	and	r24, r24
    15e6:	09 f4       	brne	.+2      	; 0x15ea <saveM2CurrentSamples+0x8>
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	60 e8       	ldi	r22, 0x80	; 128
		samples = 1;
	for ( i = 0; i < 8; i++ )
	{
		if ( samples & bitmask )
    15ee:	86 2f       	mov	r24, r22
    15f0:	82 23       	and	r24, r18
    15f2:	21 f4       	brne	.+8      	; 0x15fc <saveM2CurrentSamples+0x1a>
			break;
		bitmask >>= 1;
    15f4:	66 95       	lsr	r22
	unsigned char bitmask = 0x80;

	// ensure samples is a power of two
	if ( samples == 0 )
		samples = 1;
	for ( i = 0; i < 8; i++ )
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	98 30       	cpi	r25, 0x08	; 8
    15fa:	c9 f7       	brne	.-14     	; 0x15ee <saveM2CurrentSamples+0xc>
		if ( samples & bitmask )
			break;
		bitmask >>= 1;
	}
	samples &= bitmask;
	writeEEPROM( ADDR_M2_CURRENT_SAMPLES, samples );
    15fc:	62 23       	and	r22, r18
    15fe:	84 e0       	ldi	r24, 0x04	; 4
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1606:	08 95       	ret

00001608 <saveM1CurrentLimit>:
// the motor shuts off.  If P is non-zero, the motor's PWM is decreased by
// P * (current - limit).  The PWM will never increase by an amount greater
// than P * | limit - current | while accelerating, either.  There are
// no restrictions on limit; P must be no greater than 127.
void saveM1CurrentLimit( unsigned char limit, unsigned char P )
{
    1608:	1f 93       	push	r17
    160a:	28 2f       	mov	r18, r24
    160c:	16 2f       	mov	r17, r22
	if ( P > 127 )
    160e:	67 fd       	sbrc	r22, 7
    1610:	1f e7       	ldi	r17, 0x7F	; 127
		P = 127;
	writeEEPROM( ADDR_M1_CURRENT_LIMIT, limit );
    1612:	85 e0       	ldi	r24, 0x05	; 5
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	62 2f       	mov	r22, r18
    1618:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
	writeEEPROM( ADDR_M1_CL_P_CONST, P );
    161c:	86 e0       	ldi	r24, 0x06	; 6
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	61 2f       	mov	r22, r17
    1622:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1626:	1f 91       	pop	r17
    1628:	08 95       	ret

0000162a <saveM2CurrentLimit>:

void saveM2CurrentLimit( unsigned char limit, unsigned char P )
{
    162a:	1f 93       	push	r17
    162c:	28 2f       	mov	r18, r24
    162e:	16 2f       	mov	r17, r22
	if ( P > 127 )
    1630:	67 fd       	sbrc	r22, 7
    1632:	1f e7       	ldi	r17, 0x7F	; 127
		P = 127;
	writeEEPROM( ADDR_M2_CURRENT_LIMIT, limit );
    1634:	87 e0       	ldi	r24, 0x07	; 7
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	62 2f       	mov	r22, r18
    163a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
	writeEEPROM( ADDR_M2_CL_P_CONST, P );
    163e:	88 e0       	ldi	r24, 0x08	; 8
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	61 2f       	mov	r22, r17
    1644:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1648:	1f 91       	pop	r17
    164a:	08 95       	ret

0000164c <saveM1Acceleration>:
// Saves the accelerations used by the accelMotor functions. Acceleration
//  commands cause the motor's pwm to be incremented by accel/10 every
//  10ms.  The net effect is that the pwm increases by accel every 100ms.
//  An accel of zero produces "infinite" acceleration.
void saveM1Acceleration( unsigned char accel )
{
    164c:	68 2f       	mov	r22, r24
	writeEEPROM( ADDR_M1_ACCELERATION, accel );
    164e:	89 e0       	ldi	r24, 0x09	; 9
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1656:	08 95       	ret

00001658 <saveM2Acceleration>:

void saveM2Acceleration( unsigned char accel)
{
    1658:	68 2f       	mov	r22, r24
	writeEEPROM( ADDR_M2_ACCELERATION, accel);
    165a:	8a e0       	ldi	r24, 0x0A	; 10
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1662:	08 95       	ret

00001664 <saveM1BrakeDuration>:
// Saves the duration the motor spends braking low at 100% duty cycle
//  when an accelMotor command is received that will causes the motor to
//  change direction.  brakeDuration is in units of 10ms, so a value of
//  1 will brake for 10ms and a value of 127 will brake for 1.27s.
void saveM1BrakeDuration( unsigned char brakeDuration )
{
    1664:	68 2f       	mov	r22, r24
	writeEEPROM( ADDR_M1_BRAKE_DURATION, brakeDuration );
    1666:	8b e0       	ldi	r24, 0x0B	; 11
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    166e:	08 95       	ret

00001670 <saveM2BrakeDuration>:

void saveM2BrakeDuration( unsigned char brakeDuration )
{
    1670:	68 2f       	mov	r22, r24
	writeEEPROM( ADDR_M2_BRAKE_DURATION, brakeDuration );
    1672:	8c e0       	ldi	r24, 0x0C	; 12
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    167a:	08 95       	ret

0000167c <saveSerialSettings>:
//  UART #defines in SPI.h.  speedMode is either UART_NORMAL_SPEED or
//  UART_DOUBLE_SPEED.  This command will disable a saved permanent progmode
//  if it's enabled.
void saveSerialSettings( unsigned char parity, unsigned char stopBits,
						 unsigned char speedMode, unsigned int UBRR )
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	58 2f       	mov	r21, r24
    1682:	e6 2f       	mov	r30, r22
	// ensure parameter values are all valid
	if (( parity != UART_EVEN_PARITY ) && ( parity != UART_ODD_PARITY ))
    1684:	82 50       	subi	r24, 0x02	; 2
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	08 f0       	brcs	.+2      	; 0x168c <saveSerialSettings+0x10>
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	e9 01       	movw	r28, r18
    168e:	88 e0       	ldi	r24, 0x08	; 8
    1690:	20 30       	cpi	r18, 0x00	; 0
    1692:	38 07       	cpc	r19, r24
    1694:	10 f0       	brcs	.+4      	; 0x169a <saveSerialSettings+0x1e>
    1696:	cf ef       	ldi	r28, 0xFF	; 255
    1698:	d7 e0       	ldi	r29, 0x07	; 7
	if ( speedMode != UART_NORMAL_SPEED )
		speedMode = UART_DOUBLE_SPEED;
	if ( UBRR > 2047 )					// UBRR must be an 11-bit value
		UBRR = 2047;

	writeEEPROM( ADDR_SERIAL_SETTINGS, ( parity << 4 ) | ( stopBits << 3 ) |
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	44 23       	and	r20, r20
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <saveSerialSettings+0x2a>
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	ee 23       	and	r30, r30
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <saveSerialSettings+0x3a>
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	23 e0       	ldi	r18, 0x03	; 3
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	2a 95       	dec	r18
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <saveSerialSettings+0x3c>
    16c0:	68 2b       	or	r22, r24
    16c2:	52 95       	swap	r21
    16c4:	50 7f       	andi	r21, 0xF0	; 240
    16c6:	65 2b       	or	r22, r21
    16c8:	8d e0       	ldi	r24, 0x0D	; 13
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
									   ( speedMode << 1 ));
	writeEEPROM( ADDR_SERIAL_UBRRH, (( UBRR & 0x0700 ) >> 8 ));
    16d0:	9e 01       	movw	r18, r28
    16d2:	20 70       	andi	r18, 0x00	; 0
    16d4:	37 70       	andi	r19, 0x07	; 7
    16d6:	8e e0       	ldi	r24, 0x0E	; 14
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	63 2f       	mov	r22, r19
    16dc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
	writeEEPROM( ADDR_SERIAL_UBRRL, UBRR & 0x00FF );
    16e0:	8f e0       	ldi	r24, 0x0F	; 15
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	6c 2f       	mov	r22, r28
    16e6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <saveEnablePermanentProgMode>:

// Reserves the UART solely for programming the mega644 so that you do not need
//  to explicitly put the X2 into programming mode to program the mega644.
void saveEnablePermanentProgMode()
{
	writeEEPROM( ADDR_SERIAL_SETTINGS, 0x40 );
    16f0:	8d e0       	ldi	r24, 0x0D	; 13
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	60 e4       	ldi	r22, 0x40	; 64
    16f6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    16fa:	08 95       	ret

000016fc <saveReadReadySize>:


// Determines how many bytes must be in the UART read buffer before the status
//  byte and attention line indicate that it is ready to be read.
void saveReadReadySize( unsigned char readReadySize )
{
    16fc:	68 2f       	mov	r22, r24
	// readReadySize must be in the range of 1 - UART_READ_BUFF_SZ (32)
	if ( readReadySize == 0 )
    16fe:	88 23       	and	r24, r24
    1700:	11 f4       	brne	.+4      	; 0x1706 <saveReadReadySize+0xa>
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	03 c0       	rjmp	.+6      	; 0x170c <saveReadReadySize+0x10>
		readReadySize = 1;
	if ( readReadySize > UART_READ_BUFF_SZ )
    1706:	81 32       	cpi	r24, 0x21	; 33
    1708:	08 f0       	brcs	.+2      	; 0x170c <saveReadReadySize+0x10>
    170a:	60 e2       	ldi	r22, 0x20	; 32
		readReadySize = UART_READ_BUFF_SZ;

	writeEEPROM( ADDR_SERIAL_READ_READY, readReadySize );
    170c:	80 e1       	ldi	r24, 0x10	; 16
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1714:	08 95       	ret

00001716 <saveVolume>:

// Saves the volume of the buzzer by changing the duty cycle of the pwm driving
//  it.  buzzer duty cycle = 1 >> ( 16 - volume ).  volume must range from
//  0 - 15.
void saveVolume( unsigned char volume )
{
    1716:	68 2f       	mov	r22, r24
	if ( volume > 15 )
		volume = 15;
	writeEEPROM( ADDR_BUZZER_VOLUME, volume );
    1718:	80 31       	cpi	r24, 0x10	; 16
    171a:	08 f0       	brcs	.+2      	; 0x171e <saveVolume+0x8>
    171c:	6f e0       	ldi	r22, 0x0F	; 15
    171e:	81 e1       	ldi	r24, 0x11	; 17
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1726:	08 95       	ret

00001728 <saveNoteGap>:


// noteGap determines the silent pause (in ms) that's inserted after every note
//  the buzzer plays.
void saveNoteGap( unsigned char noteGap )
{
    1728:	68 2f       	mov	r22, r24
	writeEEPROM( ADDR_NOTE_GAP, noteGap );
    172a:	83 e1       	ldi	r24, 0x13	; 19
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    1732:	08 95       	ret

00001734 <saveStartupMelody>:
// Determine the sound that plays when the mega168 initializes itself after a
//  shutdown or reset.  if 0 <= melody <= 7, it will play that melody on
//  startup.  If melody == 8, it will make no sound on startup.  All other
//  melody values will cause it to chirp on startup.
void saveStartupMelody( unsigned char melody )
{
    1734:	68 2f       	mov	r22, r24
	writeEEPROM( ADDR_STARTUP_MELODY, melody );
    1736:	82 e1       	ldi	r24, 0x12	; 18
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    173e:	08 95       	ret

00001740 <saveAVRISPVersion>:
//  your mega644 (you cannot upgrade your firmware, anyway, so this dialog is
//  nothing more than an annoyance). As such, you might have a better
//  programming experience if you set these version values to match the AVRISP
//  version used by the AVR Studio you're running (if you use AVR Studio).
void saveAVRISPVersion( unsigned char vMajor, unsigned char vMinor )
{
    1740:	1f 93       	push	r17
    1742:	28 2f       	mov	r18, r24
    1744:	16 2f       	mov	r17, r22
	// version is "vMajor.vMinor"
	writeEEPROM( ADDR_ISP_SW_MAJOR, vMajor );
    1746:	87 e1       	ldi	r24, 0x17	; 23
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	62 2f       	mov	r22, r18
    174c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
	writeEEPROM( ADDR_ISP_SW_MINOR, vMinor );
    1750:	86 e1       	ldi	r24, 0x16	; 22
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	61 2f       	mov	r22, r17
    1756:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writeEEPROM>
}
    175a:	1f 91       	pop	r17
    175c:	08 95       	ret

0000175e <__udivmodhi4>:
    175e:	aa 1b       	sub	r26, r26
    1760:	bb 1b       	sub	r27, r27
    1762:	51 e1       	ldi	r21, 0x11	; 17
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <__udivmodhi4_ep>

00001766 <__udivmodhi4_loop>:
    1766:	aa 1f       	adc	r26, r26
    1768:	bb 1f       	adc	r27, r27
    176a:	a6 17       	cp	r26, r22
    176c:	b7 07       	cpc	r27, r23
    176e:	10 f0       	brcs	.+4      	; 0x1774 <__udivmodhi4_ep>
    1770:	a6 1b       	sub	r26, r22
    1772:	b7 0b       	sbc	r27, r23

00001774 <__udivmodhi4_ep>:
    1774:	88 1f       	adc	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	5a 95       	dec	r21
    177a:	a9 f7       	brne	.-22     	; 0x1766 <__udivmodhi4_loop>
    177c:	80 95       	com	r24
    177e:	90 95       	com	r25
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	08 95       	ret

00001786 <_exit>:
    1786:	f8 94       	cli

00001788 <__stop_program>:
    1788:	ff cf       	rjmp	.-2      	; 0x1788 <__stop_program>
